debugger.lua: Loaded for Lua 5.3
[31mdebugger.lua: Linenoise support enabled.[0m
[0m[32m# Creating signed constructor for (b -> c) -> (a -> b) -> a -> c[0m
[0m[33m@ Setting function for (b -> c) -> (a -> b) -> a -> c[0m
[0m[32m# Creating signed constructor for a -> b -> a[0m
[0m[33m@ Setting function for a -> b -> a[0m
len	0
annot	""
addref	{
  <metatable> = {
    __cons = "Nothing",
    __kind = "Nothing",
    __name = "Nothing",
    __parent = {
      constructors = {
        Nothing = "Maybe "
      },
      instanceOf = {}
    },
    __type = "Maybe"
  }
}
len	1
[0m[32m# Creating signed constructor for (Just) a -> Maybe[0m
[0m[33m@ Setting function for (Just) a -> Maybe[0m
annot	"a"
addref	{
  fn = <function 1>,
  name = "Just",
  safe = false,
  signature = "(Just) a -> Maybe",
  silent = false,
  tree = { -- a->Maybe
    __fn = true,
    __sig = "a->Maybe",
    context = {},
    left = "a",
    name = "Just",
    right = "Maybe",
    <metatable> = {
      __tostring = <function 2>
    }
  },
  type = {
    add = <function 3>,
    datatypes = {},
    resolve = <function 4>,
    resolvers = { <function 5>, <function 6> },
    <metatable> = {
      __call = <function 7>
    }
  },
  <metatable> = {
    __call = <function 8>,
    __cons = "Just",
    __kind = "TypeKit",
    __name = "Just",
    __parent = {
      constructors = {
        Just = "Maybe a",
        Nothing = "Maybe "
      },
      instanceOf = {}
    },
    __type = "Function"
  }
}
[0m[32m# Creating signed constructor for (<**>) Applicative f => f a -> f (a -> b) -> f b[0m
[0m[33m@ Setting function for (<**>) Applicative f => f a -> f (a -> b) -> f b[0m
[0m[32m# Creating signed constructor for (liftA) Applicative f => (a -> b) -> f a -> f b[0m
[0m[33m@ Setting function for (liftA) Applicative f => (a -> b) -> f a -> f b[0m
new-instance	{
  fmap = <function 1>
}	{ <1>{ -- Maybe
    constructors = {
      Just = "Maybe a",
      Nothing = "Maybe "
    },
    instanceOf = { {
        expect = { "f" },
        instances = {},
        signatures = {
          fc = <function 1>,
          fmap = <function 2>
        },
        <metatable> = {
          __kind = "Functor",
          __name = "Functor",
          __type = "Typeclass"
        }
      } },
    <metatable> = {
      __index = <2>{
        Just = {
          fn = <function 3>,
          name = "Just",
          safe = false,
          signature = "(Just) a -> Maybe",
          silent = false,
          tree = { -- a->Maybe
            __fn = true,
            __sig = "a->Maybe",
            context = {},
            left = "a",
            name = "Just",
            right = "Maybe",
            <metatable> = {
              __tostring = <function 4>
            }
          },
          type = {
            add = <function 5>,
            datatypes = {
              Maybe = <table 1>
            },
            resolve = <function 6>,
            resolvers = { <function 7>, <function 8> },
            <metatable> = {
              __call = <function 9>
            }
          },
          <metatable> = {
            __call = <function 10>,
            __cons = "Just",
            __kind = "TypeKit",
            __name = "Just",
            __parent = <table 1>,
            __type = "Function"
          }
        },
        Nothing = {
          <metatable> = {
            __cons = "Nothing",
            __kind = "Nothing",
            __name = "Nothing",
            __parent = <table 1>,
            __type = "Maybe"
          }
        }
      },
      __kind = "Maybe",
      __name = "Maybe",
      __ref = <table 2>,
      __tostring = <function 11>,
      __type = "Type"
    }
  } }	Maybe
callWith	{
  f = "Maybe"
}
[0m[32m# Creating signed constructor for (fmap) (a -> b) -> Maybe a -> Maybe b[0m
instancing	fmap	<function 1>
[0m[33m@ Setting function for (fmap) (a -> b) -> Maybe a -> Maybe b[0m
new-instance	{
  liftA2 = <function 1>,
  pure = <1>{
    fn = <function 2>,
    name = "Just",
    safe = false,
    signature = "(Just) a -> Maybe",
    silent = false,
    tree = { -- a->Maybe
      __fn = true,
      __sig = "a->Maybe",
      context = {},
      left = "a",
      name = "Just",
      right = "Maybe",
      <metatable> = {
        __tostring = <function 3>
      }
    },
    type = <2>{
      add = <function 4>,
      datatypes = {
        Maybe = <3>{ -- Maybe
          constructors = {
            Just = "Maybe a",
            Nothing = "Maybe "
          },
          instanceOf = { {
              expect = { "f" },
              instances = {
                Maybe = {
                  fmap = {
                    fn = <function 5>,
                    name = "fmap",
                    safe = false,
                    signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                    silent = false,
                    tree = { -- (a->b)->Maybe a->Maybe b
                      __fn = true,
                      __sig = "(a->b)->Maybe a->Maybe b",
                      context = {},
                      left = { -- a->b
                        __fn = true,
                        __sig = "a->b",
                        context = {},
                        left = "a",
                        right = "b",
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      name = "fmap",
                      right = { -- Maybe a->Maybe b
                        __fn = true,
                        __sig = "Maybe a->Maybe b",
                        context = {},
                        left = { -- Maybe a
                           "Maybe", "a",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 6>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 6>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 2>,
                    <metatable> = {
                      __call = <function 7>,
                      __kind = "TypeKit",
                      __name = "fmap",
                      __type = "Function"
                    }
                  }
                }
              },
              signatures = {
                fc = <function 8>,
                fmap = <function 9>
              },
              <metatable> = {
                __kind = "Functor",
                __name = "Functor",
                __type = "Typeclass"
              }
            }, {
              expect = { "f" },
              instances = {},
              signatures = {
                liftA2 = <function 10>,
                pure = <function 11>,
                seqAppl = <function 12>,
                seqL = <function 13>,
                seqR = <function 14>
              },
              <metatable> = {
                __kind = "Applicative",
                __name = "Applicative",
                __type = "Typeclass"
              }
            } },
          <metatable> = {
            __index = <4>{
              Just = <table 1>,
              Nothing = {
                <metatable> = {
                  __cons = "Nothing",
                  __kind = "Nothing",
                  __name = "Nothing",
                  __parent = <table 3>,
                  __type = "Maybe"
                }
              }
            },
            __kind = "Maybe",
            __name = "Maybe",
            __ref = <table 4>,
            __tostring = <function 15>,
            __type = "Type"
          }
        }
      },
      resolve = <function 16>,
      resolvers = { <function 17>, <function 18> },
      <metatable> = {
        __call = <function 19>
      }
    },
    <metatable> = {
      __call = <function 20>,
      __cons = "Just",
      __kind = "TypeKit",
      __name = "Just",
      __parent = <table 3>,
      __type = "Function"
    }
  },
  seqAppl = <function 21>,
  seqR = <function 22>
}	{ <1>{ -- Maybe
    constructors = {
      Just = "Maybe a",
      Nothing = "Maybe "
    },
    instanceOf = { {
        expect = { "f" },
        instances = {
          Maybe = {
            fmap = {
              fn = <function 1>,
              name = "fmap",
              safe = false,
              signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
              silent = false,
              tree = { -- (a->b)->Maybe a->Maybe b
                __fn = true,
                __sig = "(a->b)->Maybe a->Maybe b",
                context = {},
                left = { -- a->b
                  __fn = true,
                  __sig = "a->b",
                  context = {},
                  left = "a",
                  right = "b",
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                name = "fmap",
                right = { -- Maybe a->Maybe b
                  __fn = true,
                  __sig = "Maybe a->Maybe b",
                  context = {},
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b
                     "Maybe", "b",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <2>{
                add = <function 4>,
                datatypes = {
                  Maybe = <table 1>
                },
                resolve = <function 5>,
                resolvers = { <function 6>, <function 7> },
                <metatable> = {
                  __call = <function 8>
                }
              },
              <metatable> = {
                __call = <function 9>,
                __kind = "TypeKit",
                __name = "fmap",
                __type = "Function"
              }
            }
          }
        },
        signatures = {
          fc = <function 10>,
          fmap = <function 11>
        },
        <metatable> = {
          __kind = "Functor",
          __name = "Functor",
          __type = "Typeclass"
        }
      }, {
        expect = { "f" },
        instances = {},
        signatures = {
          liftA2 = <function 12>,
          pure = <function 13>,
          seqAppl = <function 14>,
          seqL = <function 15>,
          seqR = <function 16>
        },
        <metatable> = {
          __kind = "Applicative",
          __name = "Applicative",
          __type = "Typeclass"
        }
      } },
    <metatable> = {
      __index = <3>{
        Just = {
          fn = <function 17>,
          name = "Just",
          safe = false,
          signature = "(Just) a -> Maybe",
          silent = false,
          tree = { -- a->Maybe
            __fn = true,
            __sig = "a->Maybe",
            context = {},
            left = "a",
            name = "Just",
            right = "Maybe",
            <metatable> = {
              __tostring = <function 2>
            }
          },
          type = <table 2>,
          <metatable> = {
            __call = <function 18>,
            __cons = "Just",
            __kind = "TypeKit",
            __name = "Just",
            __parent = <table 1>,
            __type = "Function"
          }
        },
        Nothing = {
          <metatable> = {
            __cons = "Nothing",
            __kind = "Nothing",
            __name = "Nothing",
            __parent = <table 1>,
            __type = "Maybe"
          }
        }
      },
      __kind = "Maybe",
      __name = "Maybe",
      __ref = <table 3>,
      __tostring = <function 19>,
      __type = "Type"
    }
  } }	Maybe
callWith	{
  f = "Maybe"
}
[0m[32m# Creating signed constructor for (pure)   Functor Maybe => a -> Maybe a[0m
instancing	pure	<function 1>
[0m[33m@ Setting function for (pure)   Functor Maybe => a -> Maybe a[0m
[0m[32m# Creating signed constructor for (liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c[0m
instancing	liftA2	<function 1>
[0m[33m@ Setting function for (liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c[0m
[0m[32m# Creating signed constructor for (*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b[0m
instancing	seqR	<function 1>
[0m[33m@ Setting function for (*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b[0m
[0m[32m# Creating signed constructor for (<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b[0m
instancing	seqAppl	<function 1>
[0m[33m@ Setting function for (<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b[0m
new-instance	{
  bind = <function 1>,
  fail = <function 2>,
  pass = {
    instances = {
      Maybe = <1>{
        fn = <function 3>,
        safe = false,
        signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
        silent = false,
        tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
          __fn = true,
          __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
          context = {
            ["*>"] = {},
            Maybe = { "Functor" }
          },
          left = { -- Maybe a
             "Maybe", "a",
            __appl = true,
            <metatable> = {
              __tostring = <function 4>
            }
          },
          right = { -- Maybe b->Maybe b
            __fn = true,
            __sig = "Maybe b->Maybe b",
            context = {},
            left = { -- Maybe b
               "Maybe", "b",
              __appl = true,
              <metatable> = {
                __tostring = <function 4>
              }
            },
            right = { -- Maybe b
               "Maybe", "b",
              __appl = true,
              <metatable> = {
                __tostring = <function 4>
              }
            },
            <metatable> = {
              __tostring = <function 5>
            }
          },
          <metatable> = {
            __tostring = <function 5>
          }
        },
        type = <2>{
          add = <function 6>,
          datatypes = {
            Maybe = <3>{ -- Maybe
              constructors = {
                Just = "Maybe a",
                Nothing = "Maybe "
              },
              instanceOf = { {
                  expect = { "f" },
                  instances = {
                    Maybe = {
                      fmap = {
                        fn = <function 7>,
                        name = "fmap",
                        safe = false,
                        signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                        silent = false,
                        tree = { -- (a->b)->Maybe a->Maybe b
                          __fn = true,
                          __sig = "(a->b)->Maybe a->Maybe b",
                          context = {},
                          left = { -- a->b
                            __fn = true,
                            __sig = "a->b",
                            context = {},
                            left = "a",
                            right = "b",
                            <metatable> = {
                              __tostring = <function 5>
                            }
                          },
                          name = "fmap",
                          right = { -- Maybe a->Maybe b
                            __fn = true,
                            __sig = "Maybe a->Maybe b",
                            context = {},
                            left = { -- Maybe a
                               "Maybe", "a",
                              __appl = true,
                              <metatable> = {
                                __tostring = <function 4>
                              }
                            },
                            right = { -- Maybe b
                               "Maybe", "b",
                              __appl = true,
                              <metatable> = {
                                __tostring = <function 4>
                              }
                            },
                            <metatable> = {
                              __tostring = <function 5>
                            }
                          },
                          <metatable> = {
                            __tostring = <function 5>
                          }
                        },
                        type = <table 2>,
                        <metatable> = {
                          __call = <function 8>,
                          __kind = "TypeKit",
                          __name = "fmap",
                          __type = "Function"
                        }
                      }
                    }
                  },
                  signatures = {
                    fc = <function 9>,
                    fmap = <function 10>
                  },
                  <metatable> = {
                    __kind = "Functor",
                    __name = "Functor",
                    __type = "Typeclass"
                  }
                }, {
                  expect = { "f" },
                  instances = {
                    Maybe = {
                      liftA2 = {
                        fn = <function 11>,
                        name = "liftA2",
                        safe = false,
                        signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                        silent = false,
                        tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                          __fn = true,
                          __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                          context = {
                            Maybe = { "Functor" }
                          },
                          left = { -- a->b->c
                            __fn = true,
                            __sig = "a->b->c",
                            context = {},
                            left = "a",
                            right = { -- b->c
                              __fn = true,
                              __sig = "b->c",
                              context = {},
                              left = "b",
                              right = "c",
                              <metatable> = {
                                __tostring = <function 5>
                              }
                            },
                            <metatable> = {
                              __tostring = <function 5>
                            }
                          },
                          name = "liftA2",
                          right = { -- Maybe a->Maybe b->Maybe c
                            __fn = true,
                            __sig = "Maybe a->Maybe b->Maybe c",
                            context = {},
                            left = { -- Maybe a
                               "Maybe", "a",
                              __appl = true,
                              <metatable> = {
                                __tostring = <function 4>
                              }
                            },
                            right = { -- Maybe b->Maybe c
                              __fn = true,
                              __sig = "Maybe b->Maybe c",
                              context = {},
                              left = { -- Maybe b
                                 "Maybe", "b",
                                __appl = true,
                                <metatable> = {
                                  __tostring = <function 4>
                                }
                              },
                              right = { -- Maybe c
                                 "Maybe", "c",
                                __appl = true,
                                <metatable> = {
                                  __tostring = <function 4>
                                }
                              },
                              <metatable> = {
                                __tostring = <function 5>
                              }
                            },
                            <metatable> = {
                              __tostring = <function 5>
                            }
                          },
                          <metatable> = {
                            __tostring = <function 5>
                          }
                        },
                        type = <table 2>,
                        <metatable> = {
                          __call = <function 12>,
                          __kind = "TypeKit",
                          __name = "liftA2",
                          __type = "Function"
                        }
                      },
                      pure = {
                        fn = <function 13>,
                        name = "pure",
                        safe = false,
                        signature = "(pure)   Functor Maybe => a -> Maybe a",
                        silent = false,
                        tree = { -- Functor Maybe=>a->Maybe a
                          __fn = true,
                          __sig = "Functor Maybe=>a->Maybe a",
                          context = {
                            Maybe = { "Functor" }
                          },
                          left = "a",
                          name = "pure",
                          right = { -- Maybe a
                             "Maybe", "a",
                            __appl = true,
                            <metatable> = {
                              __tostring = <function 4>
                            }
                          },
                          <metatable> = {
                            __tostring = <function 5>
                          }
                        },
                        type = <table 2>,
                        <metatable> = {
                          __call = <function 14>,
                          __kind = "TypeKit",
                          __name = "pure",
                          __type = "Function"
                        }
                      },
                      seqAppl = {
                        fn = <function 15>,
                        safe = false,
                        signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                        silent = false,
                        tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                          __fn = true,
                          __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                          context = {
                            ["<*>"] = {},
                            Maybe = { "Functor" }
                          },
                          left = { -- Maybe a->b
                             "Maybe", { -- a->b
                              __fn = true,
                              __sig = "a->b",
                              context = {},
                              left = "a",
                              right = "b",
                              <metatable> = {
                                __tostring = <function 5>
                              }
                            },
                            __appl = true,
                            <metatable> = {
                              __tostring = <function 4>
                            }
                          },
                          right = { -- Maybe a->Maybe b
                            __fn = true,
                            __sig = "Maybe a->Maybe b",
                            context = {},
                            left = { -- Maybe a
                               "Maybe", "a",
                              __appl = true,
                              <metatable> = {
                                __tostring = <function 4>
                              }
                            },
                            right = { -- Maybe b
                               "Maybe", "b",
                              __appl = true,
                              <metatable> = {
                                __tostring = <function 4>
                              }
                            },
                            <metatable> = {
                              __tostring = <function 5>
                            }
                          },
                          <metatable> = {
                            __tostring = <function 5>
                          }
                        },
                        type = <table 2>,
                        <metatable> = {
                          __call = <function 16>,
                          __kind = "TypeKit",
                          __type = "Function"
                        }
                      },
                      seqR = <table 1>
                    }
                  },
                  signatures = {
                    liftA2 = <function 17>,
                    pure = <function 18>,
                    seqAppl = <function 19>,
                    seqL = <function 20>,
                    seqR = <function 21>
                  },
                  <metatable> = {
                    __kind = "Applicative",
                    __name = "Applicative",
                    __type = "Typeclass"
                  }
                }, {
                  expect = { "m" },
                  instances = {},
                  signatures = {
                    bind = <function 22>,
                    fail = <function 23>,
                    pass = <function 24>,
                    ret = <function 25>
                  },
                  <metatable> = {
                    __kind = "Monad",
                    __name = "Monad",
                    __type = "Typeclass"
                  }
                } },
              <metatable> = {
                __index = <4>{
                  Just = {
                    fn = <function 26>,
                    name = "Just",
                    safe = false,
                    signature = "(Just) a -> Maybe",
                    silent = false,
                    tree = { -- a->Maybe
                      __fn = true,
                      __sig = "a->Maybe",
                      context = {},
                      left = "a",
                      name = "Just",
                      right = "Maybe",
                      <metatable> = {
                        __tostring = <function 5>
                      }
                    },
                    type = <table 2>,
                    <metatable> = {
                      __call = <function 27>,
                      __cons = "Just",
                      __kind = "TypeKit",
                      __name = "Just",
                      __parent = <table 3>,
                      __type = "Function"
                    }
                  },
                  Nothing = {
                    <metatable> = {
                      __cons = "Nothing",
                      __kind = "Nothing",
                      __name = "Nothing",
                      __parent = <table 3>,
                      __type = "Maybe"
                    }
                  }
                },
                __kind = "Maybe",
                __name = "Maybe",
                __ref = <table 4>,
                __tostring = <function 28>,
                __type = "Type"
              }
            }
          },
          resolve = <function 29>,
          resolvers = { <function 30>, <function 31> },
          <metatable> = {
            __call = <function 32>
          }
        },
        <metatable> = {
          __call = <function 33>,
          __kind = "TypeKit",
          __type = "Function"
        }
      }
    },
    name = "seqR",
    <metatable> = {
      __call = <function 34>,
      __index = <function 35>
    }
  }
}	{ <1>{ -- Maybe
    constructors = {
      Just = "Maybe a",
      Nothing = "Maybe "
    },
    instanceOf = { {
        expect = { "f" },
        instances = {
          Maybe = {
            fmap = {
              fn = <function 1>,
              name = "fmap",
              safe = false,
              signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
              silent = false,
              tree = { -- (a->b)->Maybe a->Maybe b
                __fn = true,
                __sig = "(a->b)->Maybe a->Maybe b",
                context = {},
                left = { -- a->b
                  __fn = true,
                  __sig = "a->b",
                  context = {},
                  left = "a",
                  right = "b",
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                name = "fmap",
                right = { -- Maybe a->Maybe b
                  __fn = true,
                  __sig = "Maybe a->Maybe b",
                  context = {},
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b
                     "Maybe", "b",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <2>{
                add = <function 4>,
                datatypes = {
                  Maybe = <table 1>
                },
                resolve = <function 5>,
                resolvers = { <function 6>, <function 7> },
                <metatable> = {
                  __call = <function 8>
                }
              },
              <metatable> = {
                __call = <function 9>,
                __kind = "TypeKit",
                __name = "fmap",
                __type = "Function"
              }
            }
          }
        },
        signatures = {
          fc = <function 10>,
          fmap = <function 11>
        },
        <metatable> = {
          __kind = "Functor",
          __name = "Functor",
          __type = "Typeclass"
        }
      }, {
        expect = { "f" },
        instances = {
          Maybe = {
            liftA2 = {
              fn = <function 12>,
              name = "liftA2",
              safe = false,
              signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
              silent = false,
              tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                __fn = true,
                __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                context = {
                  Maybe = { "Functor" }
                },
                left = { -- a->b->c
                  __fn = true,
                  __sig = "a->b->c",
                  context = {},
                  left = "a",
                  right = { -- b->c
                    __fn = true,
                    __sig = "b->c",
                    context = {},
                    left = "b",
                    right = "c",
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                name = "liftA2",
                right = { -- Maybe a->Maybe b->Maybe c
                  __fn = true,
                  __sig = "Maybe a->Maybe b->Maybe c",
                  context = {},
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b->Maybe c
                    __fn = true,
                    __sig = "Maybe b->Maybe c",
                    context = {},
                    left = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe c
                       "Maybe", "c",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <table 2>,
              <metatable> = {
                __call = <function 13>,
                __kind = "TypeKit",
                __name = "liftA2",
                __type = "Function"
              }
            },
            pure = {
              fn = <function 14>,
              name = "pure",
              safe = false,
              signature = "(pure)   Functor Maybe => a -> Maybe a",
              silent = false,
              tree = { -- Functor Maybe=>a->Maybe a
                __fn = true,
                __sig = "Functor Maybe=>a->Maybe a",
                context = {
                  Maybe = { "Functor" }
                },
                left = "a",
                name = "pure",
                right = { -- Maybe a
                   "Maybe", "a",
                  __appl = true,
                  <metatable> = {
                    __tostring = <function 3>
                  }
                },
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <table 2>,
              <metatable> = {
                __call = <function 15>,
                __kind = "TypeKit",
                __name = "pure",
                __type = "Function"
              }
            },
            seqAppl = {
              fn = <function 16>,
              safe = false,
              signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
              silent = false,
              tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                __fn = true,
                __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                context = {
                  ["<*>"] = {},
                  Maybe = { "Functor" }
                },
                left = { -- Maybe a->b
                   "Maybe", { -- a->b
                    __fn = true,
                    __sig = "a->b",
                    context = {},
                    left = "a",
                    right = "b",
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  __appl = true,
                  <metatable> = {
                    __tostring = <function 3>
                  }
                },
                right = { -- Maybe a->Maybe b
                  __fn = true,
                  __sig = "Maybe a->Maybe b",
                  context = {},
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b
                     "Maybe", "b",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <table 2>,
              <metatable> = {
                __call = <function 17>,
                __kind = "TypeKit",
                __type = "Function"
              }
            },
            seqR = {
              fn = <function 18>,
              safe = false,
              signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
              silent = false,
              tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                __fn = true,
                __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                context = {
                  ["*>"] = {},
                  Maybe = { "Functor" }
                },
                left = { -- Maybe a
                   "Maybe", "a",
                  __appl = true,
                  <metatable> = {
                    __tostring = <function 3>
                  }
                },
                right = { -- Maybe b->Maybe b
                  __fn = true,
                  __sig = "Maybe b->Maybe b",
                  context = {},
                  left = { -- Maybe b
                     "Maybe", "b",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b
                     "Maybe", "b",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <table 2>,
              <metatable> = {
                __call = <function 19>,
                __kind = "TypeKit",
                __type = "Function"
              }
            }
          }
        },
        signatures = {
          liftA2 = <function 20>,
          pure = <function 21>,
          seqAppl = <function 22>,
          seqL = <function 23>,
          seqR = <function 24>
        },
        <metatable> = {
          __kind = "Applicative",
          __name = "Applicative",
          __type = "Typeclass"
        }
      }, {
        expect = { "m" },
        instances = {},
        signatures = {
          bind = <function 25>,
          fail = <function 26>,
          pass = <function 27>,
          ret = <function 28>
        },
        <metatable> = {
          __kind = "Monad",
          __name = "Monad",
          __type = "Typeclass"
        }
      } },
    <metatable> = {
      __index = <3>{
        Just = {
          fn = <function 29>,
          name = "Just",
          safe = false,
          signature = "(Just) a -> Maybe",
          silent = false,
          tree = { -- a->Maybe
            __fn = true,
            __sig = "a->Maybe",
            context = {},
            left = "a",
            name = "Just",
            right = "Maybe",
            <metatable> = {
              __tostring = <function 2>
            }
          },
          type = <table 2>,
          <metatable> = {
            __call = <function 30>,
            __cons = "Just",
            __kind = "TypeKit",
            __name = "Just",
            __parent = <table 1>,
            __type = "Function"
          }
        },
        Nothing = {
          <metatable> = {
            __cons = "Nothing",
            __kind = "Nothing",
            __name = "Nothing",
            __parent = <table 1>,
            __type = "Maybe"
          }
        }
      },
      __kind = "Maybe",
      __name = "Maybe",
      __ref = <table 3>,
      __tostring = <function 31>,
      __type = "Type"
    }
  } }	Maybe
callWith	{
  m = "Maybe"
}
[0m[32m# Creating signed constructor for (>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b[0m
instancing	bind	<function 1>
[0m[33m@ Setting function for (>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b[0m
[0m[32m# Creating signed constructor for (fail)   Applicative Maybe => String -> Maybe a[0m
instancing	fail	<function 1>
[0m[33m@ Setting function for (fail)   Applicative Maybe => String -> Maybe a[0m
[0m[32m# Creating signed constructor for (>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b[0m
instancing	pass	<function 1>
[0m[33m@ Setting function for (>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b[0m
precache?	nil
[0m[33m@ Calling function (Just) a -> Maybe[0m	{ 5 }
[0m[35m= Using cache[0m	{}
[0m[33m@ Applying arguments to (Just) a -> Maybe[0m
argx	1	Number	5
Ti	"a"
cachex	{}
[0m[36m! Saving value in cache. 'a' becomes Number.[0m
full-argi	{ 5 }
[0m[34m============[0m
constructing-with	{ 5 }
retv	{ { 5,
    <metatable> = {
      __kind = "Just",
      __name = "Just",
      __parent = <1>{ -- Maybe
        constructors = {
          Just = "Maybe a",
          Nothing = "Maybe "
        },
        instanceOf = { {
            expect = { "f" },
            instances = {
              Maybe = {
                fmap = {
                  fn = <function 1>,
                  name = "fmap",
                  safe = false,
                  signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(a->b)->Maybe a->Maybe b",
                    context = {},
                    left = { -- a->b
                      __fn = true,
                      __sig = "a->b",
                      context = {},
                      left = "a",
                      right = "b",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    name = "fmap",
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <2>{
                    add = <function 4>,
                    datatypes = {
                      Maybe = <table 1>
                    },
                    resolve = <function 5>,
                    resolvers = { <function 6>, <function 7> },
                    <metatable> = {
                      __call = <function 8>
                    }
                  },
                  <metatable> = {
                    __call = <function 9>,
                    __kind = "TypeKit",
                    __name = "fmap",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              fc = <function 10>,
              fmap = <function 11>
            },
            <metatable> = {
              __kind = "Functor",
              __name = "Functor",
              __type = "Typeclass"
            }
          }, {
            expect = { "f" },
            instances = {
              Maybe = {
                liftA2 = {
                  fn = <function 12>,
                  name = "liftA2",
                  safe = false,
                  signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                  silent = false,
                  tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                    __fn = true,
                    __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = { -- a->b->c
                      __fn = true,
                      __sig = "a->b->c",
                      context = {},
                      left = "a",
                      right = { -- b->c
                        __fn = true,
                        __sig = "b->c",
                        context = {},
                        left = "b",
                        right = "c",
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    name = "liftA2",
                    right = { -- Maybe a->Maybe b->Maybe c
                      __fn = true,
                      __sig = "Maybe a->Maybe b->Maybe c",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b->Maybe c
                        __fn = true,
                        __sig = "Maybe b->Maybe c",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        right = { -- Maybe c
                           "Maybe", "c",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 13>,
                    __kind = "TypeKit",
                    __name = "liftA2",
                    __type = "Function"
                  }
                },
                pure = {
                  fn = <function 14>,
                  name = "pure",
                  safe = false,
                  signature = "(pure)   Functor Maybe => a -> Maybe a",
                  silent = false,
                  tree = { -- Functor Maybe=>a->Maybe a
                    __fn = true,
                    __sig = "Functor Maybe=>a->Maybe a",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = "a",
                    name = "pure",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 15>,
                    __kind = "TypeKit",
                    __name = "pure",
                    __type = "Function"
                  }
                },
                seqAppl = {
                  fn = <function 16>,
                  safe = false,
                  signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                    context = {
                      ["<*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a->b
                       "Maybe", { -- a->b
                        __fn = true,
                        __sig = "a->b",
                        context = {},
                        left = "a",
                        right = "b",
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 17>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                seqR = {
                  fn = <function 18>,
                  safe = false,
                  signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      ["*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 19>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              liftA2 = <function 20>,
              pure = <function 21>,
              seqAppl = <function 22>,
              seqL = <function 23>,
              seqR = <function 24>
            },
            <metatable> = {
              __kind = "Applicative",
              __name = "Applicative",
              __type = "Typeclass"
            }
          }, {
            expect = { "m" },
            instances = {
              Maybe = {
                bind = {
                  fn = <function 25>,
                  safe = false,
                  signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                  silent = false,
                  tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                    __fn = true,
                    __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                    context = {
                      [">>="] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- (a->Maybe b)->Maybe b
                      __fn = true,
                      __sig = "(a->Maybe b)->Maybe b",
                      context = {},
                      left = { -- a->Maybe b
                        __fn = true,
                        __sig = "a->Maybe b",
                        context = {},
                        left = "a",
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 26>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                fail = {
                  fn = <function 27>,
                  name = "fail",
                  safe = false,
                  signature = "(fail)   Applicative Maybe => String -> Maybe a",
                  silent = false,
                  tree = { -- Applicative Maybe=>String->Maybe a
                    __fn = true,
                    __sig = "Applicative Maybe=>String->Maybe a",
                    context = {
                      Maybe = { "Applicative" }
                    },
                    left = "String",
                    name = "fail",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 28>,
                    __kind = "TypeKit",
                    __name = "fail",
                    __type = "Function"
                  }
                },
                pass = {
                  fn = <function 29>,
                  safe = false,
                  signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      [">>"] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 30>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              bind = <function 31>,
              fail = <function 32>,
              pass = <function 33>,
              ret = <function 34>
            },
            <metatable> = {
              __kind = "Monad",
              __name = "Monad",
              __type = "Typeclass"
            }
          } },
        <metatable> = {
          __index = <3>{
            Just = {
              fn = <function 35>,
              name = "Just",
              safe = false,
              signature = "(Just) a -> Maybe",
              silent = false,
              tree = { -- a->Maybe
                __fn = true,
                __sig = "a->Maybe",
                context = {},
                left = "a",
                name = "Just",
                right = "Maybe",
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <table 2>,
              <metatable> = {
                __call = <function 36>,
                __cons = "Just",
                __kind = "TypeKit",
                __name = "Just",
                __parent = <table 1>,
                __type = "Function"
              }
            },
            Nothing = {
              <metatable> = {
                __cons = "Nothing",
                __kind = "Nothing",
                __name = "Nothing",
                __parent = <table 1>,
                __type = "Maybe"
              }
            }
          },
          __kind = "Maybe",
          __name = "Maybe",
          __ref = <table 3>,
          __tostring = <function 37>,
          __type = "Type"
        }
      },
      __type = "Maybe"
    }
  } }
[0m[34m============[0m
argx	1	Maybe	{ 5,
  <metatable> = {
    __kind = "Just",
    __name = "Just",
    __parent = <1>{ -- Maybe
      constructors = {
        Just = "Maybe a",
        Nothing = "Maybe "
      },
      instanceOf = { {
          expect = { "f" },
          instances = {
            Maybe = {
              fmap = {
                fn = <function 1>,
                name = "fmap",
                safe = false,
                signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                silent = false,
                tree = { -- (a->b)->Maybe a->Maybe b
                  __fn = true,
                  __sig = "(a->b)->Maybe a->Maybe b",
                  context = {},
                  left = { -- a->b
                    __fn = true,
                    __sig = "a->b",
                    context = {},
                    left = "a",
                    right = "b",
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  name = "fmap",
                  right = { -- Maybe a->Maybe b
                    __fn = true,
                    __sig = "Maybe a->Maybe b",
                    context = {},
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <2>{
                  add = <function 4>,
                  datatypes = {
                    Maybe = <table 1>
                  },
                  resolve = <function 5>,
                  resolvers = { <function 6>, <function 7> },
                  <metatable> = {
                    __call = <function 8>
                  }
                },
                <metatable> = {
                  __call = <function 9>,
                  __kind = "TypeKit",
                  __name = "fmap",
                  __type = "Function"
                }
              }
            }
          },
          signatures = {
            fc = <function 10>,
            fmap = <function 11>
          },
          <metatable> = {
            __kind = "Functor",
            __name = "Functor",
            __type = "Typeclass"
          }
        }, {
          expect = { "f" },
          instances = {
            Maybe = {
              liftA2 = {
                fn = <function 12>,
                name = "liftA2",
                safe = false,
                signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                silent = false,
                tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                  __fn = true,
                  __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                  context = {
                    Maybe = { "Functor" }
                  },
                  left = { -- a->b->c
                    __fn = true,
                    __sig = "a->b->c",
                    context = {},
                    left = "a",
                    right = { -- b->c
                      __fn = true,
                      __sig = "b->c",
                      context = {},
                      left = "b",
                      right = "c",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  name = "liftA2",
                  right = { -- Maybe a->Maybe b->Maybe c
                    __fn = true,
                    __sig = "Maybe a->Maybe b->Maybe c",
                    context = {},
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe c
                      __fn = true,
                      __sig = "Maybe b->Maybe c",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe c
                         "Maybe", "c",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 13>,
                  __kind = "TypeKit",
                  __name = "liftA2",
                  __type = "Function"
                }
              },
              pure = {
                fn = <function 14>,
                name = "pure",
                safe = false,
                signature = "(pure)   Functor Maybe => a -> Maybe a",
                silent = false,
                tree = { -- Functor Maybe=>a->Maybe a
                  __fn = true,
                  __sig = "Functor Maybe=>a->Maybe a",
                  context = {
                    Maybe = { "Functor" }
                  },
                  left = "a",
                  name = "pure",
                  right = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 15>,
                  __kind = "TypeKit",
                  __name = "pure",
                  __type = "Function"
                }
              },
              seqAppl = {
                fn = <function 16>,
                safe = false,
                signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                silent = false,
                tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                  __fn = true,
                  __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                  context = {
                    ["<*>"] = {},
                    Maybe = { "Functor" }
                  },
                  left = { -- Maybe a->b
                     "Maybe", { -- a->b
                      __fn = true,
                      __sig = "a->b",
                      context = {},
                      left = "a",
                      right = "b",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe a->Maybe b
                    __fn = true,
                    __sig = "Maybe a->Maybe b",
                    context = {},
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 17>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              },
              seqR = {
                fn = <function 18>,
                safe = false,
                signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                silent = false,
                tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                  __fn = true,
                  __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                  context = {
                    ["*>"] = {},
                    Maybe = { "Functor" }
                  },
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b->Maybe b
                    __fn = true,
                    __sig = "Maybe b->Maybe b",
                    context = {},
                    left = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 19>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              }
            }
          },
          signatures = {
            liftA2 = <function 20>,
            pure = <function 21>,
            seqAppl = <function 22>,
            seqL = <function 23>,
            seqR = <function 24>
          },
          <metatable> = {
            __kind = "Applicative",
            __name = "Applicative",
            __type = "Typeclass"
          }
        }, {
          expect = { "m" },
          instances = {
            Maybe = {
              bind = {
                fn = <function 25>,
                safe = false,
                signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                silent = false,
                tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                  __fn = true,
                  __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                  context = {
                    [">>="] = {},
                    Maybe = { "Applicative" }
                  },
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- (a->Maybe b)->Maybe b
                    __fn = true,
                    __sig = "(a->Maybe b)->Maybe b",
                    context = {},
                    left = { -- a->Maybe b
                      __fn = true,
                      __sig = "a->Maybe b",
                      context = {},
                      left = "a",
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 26>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              },
              fail = {
                fn = <function 27>,
                name = "fail",
                safe = false,
                signature = "(fail)   Applicative Maybe => String -> Maybe a",
                silent = false,
                tree = { -- Applicative Maybe=>String->Maybe a
                  __fn = true,
                  __sig = "Applicative Maybe=>String->Maybe a",
                  context = {
                    Maybe = { "Applicative" }
                  },
                  left = "String",
                  name = "fail",
                  right = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 28>,
                  __kind = "TypeKit",
                  __name = "fail",
                  __type = "Function"
                }
              },
              pass = {
                fn = <function 29>,
                safe = false,
                signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                silent = false,
                tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                  __fn = true,
                  __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                  context = {
                    [">>"] = {},
                    Maybe = { "Applicative" }
                  },
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b->Maybe b
                    __fn = true,
                    __sig = "Maybe b->Maybe b",
                    context = {},
                    left = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 30>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              }
            }
          },
          signatures = {
            bind = <function 31>,
            fail = <function 32>,
            pass = <function 33>,
            ret = <function 34>
          },
          <metatable> = {
            __kind = "Monad",
            __name = "Monad",
            __type = "Typeclass"
          }
        } },
      <metatable> = {
        __index = <3>{
          Just = {
            fn = <function 35>,
            name = "Just",
            safe = false,
            signature = "(Just) a -> Maybe",
            silent = false,
            tree = { -- a->Maybe
              __fn = true,
              __sig = "a->Maybe",
              context = {},
              left = "a",
              name = "Just",
              right = "Maybe",
              <metatable> = {
                __tostring = <function 2>
              }
            },
            type = <table 2>,
            <metatable> = {
              __call = <function 36>,
              __cons = "Just",
              __kind = "TypeKit",
              __name = "Just",
              __parent = <table 1>,
              __type = "Function"
            }
          },
          Nothing = {
            <metatable> = {
              __cons = "Nothing",
              __kind = "Nothing",
              __name = "Nothing",
              __parent = <table 1>,
              __type = "Maybe"
            }
          }
        },
        __kind = "Maybe",
        __name = "Maybe",
        __ref = <table 3>,
        __tostring = <function 37>,
        __type = "Type"
      }
    },
    __type = "Maybe"
  }
}
Ti	"Maybe"
cachex	{
  a = "Number"
}
argo-full	{ { 5,
    <metatable> = {
      __kind = "Just",
      __name = "Just",
      __parent = <1>{ -- Maybe
        constructors = {
          Just = "Maybe a",
          Nothing = "Maybe "
        },
        instanceOf = { {
            expect = { "f" },
            instances = {
              Maybe = {
                fmap = {
                  fn = <function 1>,
                  name = "fmap",
                  safe = false,
                  signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(a->b)->Maybe a->Maybe b",
                    context = {},
                    left = { -- a->b
                      __fn = true,
                      __sig = "a->b",
                      context = {},
                      left = "a",
                      right = "b",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    name = "fmap",
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <2>{
                    add = <function 4>,
                    datatypes = {
                      Maybe = <table 1>
                    },
                    resolve = <function 5>,
                    resolvers = { <function 6>, <function 7> },
                    <metatable> = {
                      __call = <function 8>
                    }
                  },
                  <metatable> = {
                    __call = <function 9>,
                    __kind = "TypeKit",
                    __name = "fmap",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              fc = <function 10>,
              fmap = <function 11>
            },
            <metatable> = {
              __kind = "Functor",
              __name = "Functor",
              __type = "Typeclass"
            }
          }, {
            expect = { "f" },
            instances = {
              Maybe = {
                liftA2 = {
                  fn = <function 12>,
                  name = "liftA2",
                  safe = false,
                  signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                  silent = false,
                  tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                    __fn = true,
                    __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = { -- a->b->c
                      __fn = true,
                      __sig = "a->b->c",
                      context = {},
                      left = "a",
                      right = { -- b->c
                        __fn = true,
                        __sig = "b->c",
                        context = {},
                        left = "b",
                        right = "c",
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    name = "liftA2",
                    right = { -- Maybe a->Maybe b->Maybe c
                      __fn = true,
                      __sig = "Maybe a->Maybe b->Maybe c",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b->Maybe c
                        __fn = true,
                        __sig = "Maybe b->Maybe c",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        right = { -- Maybe c
                           "Maybe", "c",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 13>,
                    __kind = "TypeKit",
                    __name = "liftA2",
                    __type = "Function"
                  }
                },
                pure = {
                  fn = <function 14>,
                  name = "pure",
                  safe = false,
                  signature = "(pure)   Functor Maybe => a -> Maybe a",
                  silent = false,
                  tree = { -- Functor Maybe=>a->Maybe a
                    __fn = true,
                    __sig = "Functor Maybe=>a->Maybe a",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = "a",
                    name = "pure",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 15>,
                    __kind = "TypeKit",
                    __name = "pure",
                    __type = "Function"
                  }
                },
                seqAppl = {
                  fn = <function 16>,
                  safe = false,
                  signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                    context = {
                      ["<*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a->b
                       "Maybe", { -- a->b
                        __fn = true,
                        __sig = "a->b",
                        context = {},
                        left = "a",
                        right = "b",
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 17>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                seqR = {
                  fn = <function 18>,
                  safe = false,
                  signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      ["*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 19>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              liftA2 = <function 20>,
              pure = <function 21>,
              seqAppl = <function 22>,
              seqL = <function 23>,
              seqR = <function 24>
            },
            <metatable> = {
              __kind = "Applicative",
              __name = "Applicative",
              __type = "Typeclass"
            }
          }, {
            expect = { "m" },
            instances = {
              Maybe = {
                bind = {
                  fn = <function 25>,
                  safe = false,
                  signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                  silent = false,
                  tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                    __fn = true,
                    __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                    context = {
                      [">>="] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- (a->Maybe b)->Maybe b
                      __fn = true,
                      __sig = "(a->Maybe b)->Maybe b",
                      context = {},
                      left = { -- a->Maybe b
                        __fn = true,
                        __sig = "a->Maybe b",
                        context = {},
                        left = "a",
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 26>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                fail = {
                  fn = <function 27>,
                  name = "fail",
                  safe = false,
                  signature = "(fail)   Applicative Maybe => String -> Maybe a",
                  silent = false,
                  tree = { -- Applicative Maybe=>String->Maybe a
                    __fn = true,
                    __sig = "Applicative Maybe=>String->Maybe a",
                    context = {
                      Maybe = { "Applicative" }
                    },
                    left = "String",
                    name = "fail",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 28>,
                    __kind = "TypeKit",
                    __name = "fail",
                    __type = "Function"
                  }
                },
                pass = {
                  fn = <function 29>,
                  safe = false,
                  signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      [">>"] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 30>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              bind = <function 31>,
              fail = <function 32>,
              pass = <function 33>,
              ret = <function 34>
            },
            <metatable> = {
              __kind = "Monad",
              __name = "Monad",
              __type = "Typeclass"
            }
          } },
        <metatable> = {
          __index = <3>{
            Just = {
              fn = <function 35>,
              name = "Just",
              safe = false,
              signature = "(Just) a -> Maybe",
              silent = false,
              tree = { -- a->Maybe
                __fn = true,
                __sig = "a->Maybe",
                context = {},
                left = "a",
                name = "Just",
                right = "Maybe",
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <table 2>,
              <metatable> = {
                __call = <function 36>,
                __cons = "Just",
                __kind = "TypeKit",
                __name = "Just",
                __parent = <table 1>,
                __type = "Function"
              }
            },
            Nothing = {
              <metatable> = {
                __cons = "Nothing",
                __kind = "Nothing",
                __name = "Nothing",
                __parent = <table 1>,
                __type = "Maybe"
              }
            }
          },
          __kind = "Maybe",
          __name = "Maybe",
          __ref = <table 3>,
          __tostring = <function 37>,
          __type = "Type"
        }
      },
      __type = "Maybe"
    }
  } }
[0m[32m# Creating signed constructor for a -> Maybe b[0m
[0m[33m@ Setting function for a -> Maybe b[0m
call-stub	{ { 5,
    <metatable> = {
      __kind = "Just",
      __name = "Just",
      __parent = <1>{ -- Maybe
        constructors = {
          Just = "Maybe a",
          Nothing = "Maybe "
        },
        instanceOf = { {
            expect = { "f" },
            instances = {
              Maybe = {
                fmap = {
                  fn = <function 1>,
                  name = "fmap",
                  safe = false,
                  signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(a->b)->Maybe a->Maybe b",
                    context = {},
                    left = { -- a->b
                      __fn = true,
                      __sig = "a->b",
                      context = {},
                      left = "a",
                      right = "b",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    name = "fmap",
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <2>{
                    add = <function 4>,
                    datatypes = {
                      Maybe = <table 1>
                    },
                    resolve = <function 5>,
                    resolvers = { <function 6>, <function 7> },
                    <metatable> = {
                      __call = <function 8>
                    }
                  },
                  <metatable> = {
                    __call = <function 9>,
                    __kind = "TypeKit",
                    __name = "fmap",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              fc = <function 10>,
              fmap = <function 11>
            },
            <metatable> = {
              __kind = "Functor",
              __name = "Functor",
              __type = "Typeclass"
            }
          }, {
            expect = { "f" },
            instances = {
              Maybe = {
                liftA2 = {
                  fn = <function 12>,
                  name = "liftA2",
                  safe = false,
                  signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                  silent = false,
                  tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                    __fn = true,
                    __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = { -- a->b->c
                      __fn = true,
                      __sig = "a->b->c",
                      context = {},
                      left = "a",
                      right = { -- b->c
                        __fn = true,
                        __sig = "b->c",
                        context = {},
                        left = "b",
                        right = "c",
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    name = "liftA2",
                    right = { -- Maybe a->Maybe b->Maybe c
                      __fn = true,
                      __sig = "Maybe a->Maybe b->Maybe c",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b->Maybe c
                        __fn = true,
                        __sig = "Maybe b->Maybe c",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        right = { -- Maybe c
                           "Maybe", "c",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 13>,
                    __kind = "TypeKit",
                    __name = "liftA2",
                    __type = "Function"
                  }
                },
                pure = {
                  fn = <function 14>,
                  name = "pure",
                  safe = false,
                  signature = "(pure)   Functor Maybe => a -> Maybe a",
                  silent = false,
                  tree = { -- Functor Maybe=>a->Maybe a
                    __fn = true,
                    __sig = "Functor Maybe=>a->Maybe a",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = "a",
                    name = "pure",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 15>,
                    __kind = "TypeKit",
                    __name = "pure",
                    __type = "Function"
                  }
                },
                seqAppl = {
                  fn = <function 16>,
                  safe = false,
                  signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                    context = {
                      ["<*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a->b
                       "Maybe", { -- a->b
                        __fn = true,
                        __sig = "a->b",
                        context = {},
                        left = "a",
                        right = "b",
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 17>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                seqR = {
                  fn = <function 18>,
                  safe = false,
                  signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      ["*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 19>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              liftA2 = <function 20>,
              pure = <function 21>,
              seqAppl = <function 22>,
              seqL = <function 23>,
              seqR = <function 24>
            },
            <metatable> = {
              __kind = "Applicative",
              __name = "Applicative",
              __type = "Typeclass"
            }
          }, {
            expect = { "m" },
            instances = {
              Maybe = {
                bind = {
                  fn = <function 25>,
                  safe = false,
                  signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                  silent = false,
                  tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                    __fn = true,
                    __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                    context = {
                      [">>="] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- (a->Maybe b)->Maybe b
                      __fn = true,
                      __sig = "(a->Maybe b)->Maybe b",
                      context = {},
                      left = { -- a->Maybe b
                        __fn = true,
                        __sig = "a->Maybe b",
                        context = {},
                        left = "a",
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 26>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                fail = {
                  fn = <function 27>,
                  name = "fail",
                  safe = false,
                  signature = "(fail)   Applicative Maybe => String -> Maybe a",
                  silent = false,
                  tree = { -- Applicative Maybe=>String->Maybe a
                    __fn = true,
                    __sig = "Applicative Maybe=>String->Maybe a",
                    context = {
                      Maybe = { "Applicative" }
                    },
                    left = "String",
                    name = "fail",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 28>,
                    __kind = "TypeKit",
                    __name = "fail",
                    __type = "Function"
                  }
                },
                pass = {
                  fn = <function 29>,
                  safe = false,
                  signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      [">>"] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 30>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              bind = <function 31>,
              fail = <function 32>,
              pass = <function 33>,
              ret = <function 34>
            },
            <metatable> = {
              __kind = "Monad",
              __name = "Monad",
              __type = "Typeclass"
            }
          } },
        <metatable> = {
          __index = <3>{
            Just = {
              fn = <function 35>,
              name = "Just",
              safe = false,
              signature = "(Just) a -> Maybe",
              silent = false,
              tree = { -- a->Maybe
                __fn = true,
                __sig = "a->Maybe",
                context = {},
                left = "a",
                name = "Just",
                right = "Maybe",
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <table 2>,
              <metatable> = {
                __call = <function 36>,
                __cons = "Just",
                __kind = "TypeKit",
                __name = "Just",
                __parent = <table 1>,
                __type = "Function"
              }
            },
            Nothing = {
              <metatable> = {
                __cons = "Nothing",
                __kind = "Nothing",
                __name = "Nothing",
                __parent = <table 1>,
                __type = "Maybe"
              }
            }
          },
          __kind = "Maybe",
          __name = "Maybe",
          __ref = <table 3>,
          __tostring = <function 37>,
          __type = "Type"
        }
      },
      __type = "Maybe"
    }
  } }
picked	{
  Maybe = <1>{
    fn = <function 1>,
    safe = false,
    signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
    silent = false,
    tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
      __fn = true,
      __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
      context = {
        [">>="] = {},
        Maybe = { "Applicative" }
      },
      left = { -- Maybe a
         "Maybe", "a",
        __appl = true,
        <metatable> = {
          __tostring = <function 2>
        }
      },
      right = { -- (a->Maybe b)->Maybe b
        __fn = true,
        __sig = "(a->Maybe b)->Maybe b",
        context = {},
        left = { -- a->Maybe b
          __fn = true,
          __sig = "a->Maybe b",
          context = {},
          left = "a",
          right = { -- Maybe b
             "Maybe", "b",
            __appl = true,
            <metatable> = {
              __tostring = <function 2>
            }
          },
          <metatable> = {
            __tostring = <function 3>
          }
        },
        right = { -- Maybe b
           "Maybe", "b",
          __appl = true,
          <metatable> = {
            __tostring = <function 2>
          }
        },
        <metatable> = {
          __tostring = <function 3>
        }
      },
      <metatable> = {
        __tostring = <function 3>
      }
    },
    type = <2>{
      add = <function 4>,
      datatypes = {
        Maybe = <3>{ -- Maybe
          constructors = {
            Just = "Maybe a",
            Nothing = "Maybe "
          },
          instanceOf = { {
              expect = { "f" },
              instances = {
                Maybe = {
                  fmap = {
                    fn = <function 5>,
                    name = "fmap",
                    safe = false,
                    signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                    silent = false,
                    tree = { -- (a->b)->Maybe a->Maybe b
                      __fn = true,
                      __sig = "(a->b)->Maybe a->Maybe b",
                      context = {},
                      left = { -- a->b
                        __fn = true,
                        __sig = "a->b",
                        context = {},
                        left = "a",
                        right = "b",
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      name = "fmap",
                      right = { -- Maybe a->Maybe b
                        __fn = true,
                        __sig = "Maybe a->Maybe b",
                        context = {},
                        left = { -- Maybe a
                           "Maybe", "a",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 2>,
                    <metatable> = {
                      __call = <function 6>,
                      __kind = "TypeKit",
                      __name = "fmap",
                      __type = "Function"
                    }
                  }
                }
              },
              signatures = {
                fc = <function 7>,
                fmap = <function 8>
              },
              <metatable> = {
                __kind = "Functor",
                __name = "Functor",
                __type = "Typeclass"
              }
            }, {
              expect = { "f" },
              instances = {
                Maybe = {
                  liftA2 = {
                    fn = <function 9>,
                    name = "liftA2",
                    safe = false,
                    signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                    silent = false,
                    tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                      __fn = true,
                      __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                      context = {
                        Maybe = { "Functor" }
                      },
                      left = { -- a->b->c
                        __fn = true,
                        __sig = "a->b->c",
                        context = {},
                        left = "a",
                        right = { -- b->c
                          __fn = true,
                          __sig = "b->c",
                          context = {},
                          left = "b",
                          right = "c",
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      name = "liftA2",
                      right = { -- Maybe a->Maybe b->Maybe c
                        __fn = true,
                        __sig = "Maybe a->Maybe b->Maybe c",
                        context = {},
                        left = { -- Maybe a
                           "Maybe", "a",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b->Maybe c
                          __fn = true,
                          __sig = "Maybe b->Maybe c",
                          context = {},
                          left = { -- Maybe b
                             "Maybe", "b",
                            __appl = true,
                            <metatable> = {
                              __tostring = <function 2>
                            }
                          },
                          right = { -- Maybe c
                             "Maybe", "c",
                            __appl = true,
                            <metatable> = {
                              __tostring = <function 2>
                            }
                          },
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 2>,
                    <metatable> = {
                      __call = <function 10>,
                      __kind = "TypeKit",
                      __name = "liftA2",
                      __type = "Function"
                    }
                  },
                  pure = {
                    fn = <function 11>,
                    name = "pure",
                    safe = false,
                    signature = "(pure)   Functor Maybe => a -> Maybe a",
                    silent = false,
                    tree = { -- Functor Maybe=>a->Maybe a
                      __fn = true,
                      __sig = "Functor Maybe=>a->Maybe a",
                      context = {
                        Maybe = { "Functor" }
                      },
                      left = "a",
                      name = "pure",
                      right = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 2>,
                    <metatable> = {
                      __call = <function 12>,
                      __kind = "TypeKit",
                      __name = "pure",
                      __type = "Function"
                    }
                  },
                  seqAppl = {
                    fn = <function 13>,
                    safe = false,
                    signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                    silent = false,
                    tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                      __fn = true,
                      __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                      context = {
                        ["<*>"] = {},
                        Maybe = { "Functor" }
                      },
                      left = { -- Maybe a->b
                         "Maybe", { -- a->b
                          __fn = true,
                          __sig = "a->b",
                          context = {},
                          left = "a",
                          right = "b",
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe a->Maybe b
                        __fn = true,
                        __sig = "Maybe a->Maybe b",
                        context = {},
                        left = { -- Maybe a
                           "Maybe", "a",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 2>,
                    <metatable> = {
                      __call = <function 14>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  },
                  seqR = {
                    fn = <function 15>,
                    safe = false,
                    signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                    silent = false,
                    tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                      __fn = true,
                      __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                      context = {
                        ["*>"] = {},
                        Maybe = { "Functor" }
                      },
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b->Maybe b
                        __fn = true,
                        __sig = "Maybe b->Maybe b",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 2>,
                    <metatable> = {
                      __call = <function 16>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  }
                }
              },
              signatures = {
                liftA2 = <function 17>,
                pure = <function 18>,
                seqAppl = <function 19>,
                seqL = <function 20>,
                seqR = <function 21>
              },
              <metatable> = {
                __kind = "Applicative",
                __name = "Applicative",
                __type = "Typeclass"
              }
            }, {
              expect = { "m" },
              instances = {
                Maybe = {
                  bind = <table 1>,
                  fail = {
                    fn = <function 22>,
                    name = "fail",
                    safe = false,
                    signature = "(fail)   Applicative Maybe => String -> Maybe a",
                    silent = false,
                    tree = { -- Applicative Maybe=>String->Maybe a
                      __fn = true,
                      __sig = "Applicative Maybe=>String->Maybe a",
                      context = {
                        Maybe = { "Applicative" }
                      },
                      left = "String",
                      name = "fail",
                      right = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 2>,
                    <metatable> = {
                      __call = <function 23>,
                      __kind = "TypeKit",
                      __name = "fail",
                      __type = "Function"
                    }
                  },
                  pass = {
                    fn = <function 24>,
                    safe = false,
                    signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                    silent = false,
                    tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                      __fn = true,
                      __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                      context = {
                        [">>"] = {},
                        Maybe = { "Applicative" }
                      },
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b->Maybe b
                        __fn = true,
                        __sig = "Maybe b->Maybe b",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 2>,
                    <metatable> = {
                      __call = <function 25>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  }
                }
              },
              signatures = {
                bind = <function 26>,
                fail = <function 27>,
                pass = <function 28>,
                ret = <function 29>
              },
              <metatable> = {
                __kind = "Monad",
                __name = "Monad",
                __type = "Typeclass"
              }
            } },
          <metatable> = {
            __index = <4>{
              Just = {
                fn = <function 30>,
                name = "Just",
                safe = false,
                signature = "(Just) a -> Maybe",
                silent = false,
                tree = { -- a->Maybe
                  __fn = true,
                  __sig = "a->Maybe",
                  context = {},
                  left = "a",
                  name = "Just",
                  right = "Maybe",
                  <metatable> = {
                    __tostring = <function 3>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 31>,
                  __cons = "Just",
                  __kind = "TypeKit",
                  __name = "Just",
                  __parent = <table 3>,
                  __type = "Function"
                }
              },
              Nothing = {
                <metatable> = {
                  __cons = "Nothing",
                  __kind = "Nothing",
                  __name = "Nothing",
                  __parent = <table 3>,
                  __type = "Maybe"
                }
              }
            },
            __kind = "Maybe",
            __name = "Maybe",
            __ref = <table 4>,
            __tostring = <function 32>,
            __type = "Type"
          }
        }
      },
      resolve = <function 33>,
      resolvers = { <function 34>, <function 35> },
      <metatable> = {
        __call = <function 36>
      }
    },
    <metatable> = {
      __call = <function 37>,
      __kind = "TypeKit",
      __type = "Function"
    }
  },
  n = 1
}
precache?	nil
[0m[33m@ Calling function (>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b[0m	{ { 5,
    <metatable> = {
      __kind = "Just",
      __name = "Just",
      __parent = <1>{ -- Maybe
        constructors = {
          Just = "Maybe a",
          Nothing = "Maybe "
        },
        instanceOf = { {
            expect = { "f" },
            instances = {
              Maybe = {
                fmap = {
                  fn = <function 1>,
                  name = "fmap",
                  safe = false,
                  signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(a->b)->Maybe a->Maybe b",
                    context = {},
                    left = { -- a->b
                      __fn = true,
                      __sig = "a->b",
                      context = {},
                      left = "a",
                      right = "b",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    name = "fmap",
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <2>{
                    add = <function 4>,
                    datatypes = {
                      Maybe = <table 1>
                    },
                    resolve = <function 5>,
                    resolvers = { <function 6>, <function 7> },
                    <metatable> = {
                      __call = <function 8>
                    }
                  },
                  <metatable> = {
                    __call = <function 9>,
                    __kind = "TypeKit",
                    __name = "fmap",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              fc = <function 10>,
              fmap = <function 11>
            },
            <metatable> = {
              __kind = "Functor",
              __name = "Functor",
              __type = "Typeclass"
            }
          }, {
            expect = { "f" },
            instances = {
              Maybe = {
                liftA2 = {
                  fn = <function 12>,
                  name = "liftA2",
                  safe = false,
                  signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                  silent = false,
                  tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                    __fn = true,
                    __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = { -- a->b->c
                      __fn = true,
                      __sig = "a->b->c",
                      context = {},
                      left = "a",
                      right = { -- b->c
                        __fn = true,
                        __sig = "b->c",
                        context = {},
                        left = "b",
                        right = "c",
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    name = "liftA2",
                    right = { -- Maybe a->Maybe b->Maybe c
                      __fn = true,
                      __sig = "Maybe a->Maybe b->Maybe c",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b->Maybe c
                        __fn = true,
                        __sig = "Maybe b->Maybe c",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        right = { -- Maybe c
                           "Maybe", "c",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 13>,
                    __kind = "TypeKit",
                    __name = "liftA2",
                    __type = "Function"
                  }
                },
                pure = {
                  fn = <function 14>,
                  name = "pure",
                  safe = false,
                  signature = "(pure)   Functor Maybe => a -> Maybe a",
                  silent = false,
                  tree = { -- Functor Maybe=>a->Maybe a
                    __fn = true,
                    __sig = "Functor Maybe=>a->Maybe a",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = "a",
                    name = "pure",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 15>,
                    __kind = "TypeKit",
                    __name = "pure",
                    __type = "Function"
                  }
                },
                seqAppl = {
                  fn = <function 16>,
                  safe = false,
                  signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                    context = {
                      ["<*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a->b
                       "Maybe", { -- a->b
                        __fn = true,
                        __sig = "a->b",
                        context = {},
                        left = "a",
                        right = "b",
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 17>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                seqR = {
                  fn = <function 18>,
                  safe = false,
                  signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      ["*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 19>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              liftA2 = <function 20>,
              pure = <function 21>,
              seqAppl = <function 22>,
              seqL = <function 23>,
              seqR = <function 24>
            },
            <metatable> = {
              __kind = "Applicative",
              __name = "Applicative",
              __type = "Typeclass"
            }
          }, {
            expect = { "m" },
            instances = {
              Maybe = {
                bind = {
                  fn = <function 25>,
                  safe = false,
                  signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                  silent = false,
                  tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                    __fn = true,
                    __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                    context = {
                      [">>="] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- (a->Maybe b)->Maybe b
                      __fn = true,
                      __sig = "(a->Maybe b)->Maybe b",
                      context = {},
                      left = { -- a->Maybe b
                        __fn = true,
                        __sig = "a->Maybe b",
                        context = {},
                        left = "a",
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 26>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                fail = {
                  fn = <function 27>,
                  name = "fail",
                  safe = false,
                  signature = "(fail)   Applicative Maybe => String -> Maybe a",
                  silent = false,
                  tree = { -- Applicative Maybe=>String->Maybe a
                    __fn = true,
                    __sig = "Applicative Maybe=>String->Maybe a",
                    context = {
                      Maybe = { "Applicative" }
                    },
                    left = "String",
                    name = "fail",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 28>,
                    __kind = "TypeKit",
                    __name = "fail",
                    __type = "Function"
                  }
                },
                pass = {
                  fn = <function 29>,
                  safe = false,
                  signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      [">>"] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 30>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              bind = <function 31>,
              fail = <function 32>,
              pass = <function 33>,
              ret = <function 34>
            },
            <metatable> = {
              __kind = "Monad",
              __name = "Monad",
              __type = "Typeclass"
            }
          } },
        <metatable> = {
          __index = <3>{
            Just = {
              fn = <function 35>,
              name = "Just",
              safe = false,
              signature = "(Just) a -> Maybe",
              silent = false,
              tree = { -- a->Maybe
                __fn = true,
                __sig = "a->Maybe",
                context = {},
                left = "a",
                name = "Just",
                right = "Maybe",
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <table 2>,
              <metatable> = {
                __call = <function 36>,
                __cons = "Just",
                __kind = "TypeKit",
                __name = "Just",
                __parent = <table 1>,
                __type = "Function"
              }
            },
            Nothing = {
              <metatable> = {
                __cons = "Nothing",
                __kind = "Nothing",
                __name = "Nothing",
                __parent = <table 1>,
                __type = "Maybe"
              }
            }
          },
          __kind = "Maybe",
          __name = "Maybe",
          __ref = <table 3>,
          __tostring = <function 37>,
          __type = "Type"
        }
      },
      __type = "Maybe"
    }
  } }
[0m[35m= Using cache[0m	{}
[0m[33m@ Applying arguments to (>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b[0m
argx	1	Maybe	{ 5,
  <metatable> = {
    __kind = "Just",
    __name = "Just",
    __parent = <1>{ -- Maybe
      constructors = {
        Just = "Maybe a",
        Nothing = "Maybe "
      },
      instanceOf = { {
          expect = { "f" },
          instances = {
            Maybe = {
              fmap = {
                fn = <function 1>,
                name = "fmap",
                safe = false,
                signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                silent = false,
                tree = { -- (a->b)->Maybe a->Maybe b
                  __fn = true,
                  __sig = "(a->b)->Maybe a->Maybe b",
                  context = {},
                  left = { -- a->b
                    __fn = true,
                    __sig = "a->b",
                    context = {},
                    left = "a",
                    right = "b",
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  name = "fmap",
                  right = { -- Maybe a->Maybe b
                    __fn = true,
                    __sig = "Maybe a->Maybe b",
                    context = {},
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <2>{
                  add = <function 4>,
                  datatypes = {
                    Maybe = <table 1>
                  },
                  resolve = <function 5>,
                  resolvers = { <function 6>, <function 7> },
                  <metatable> = {
                    __call = <function 8>
                  }
                },
                <metatable> = {
                  __call = <function 9>,
                  __kind = "TypeKit",
                  __name = "fmap",
                  __type = "Function"
                }
              }
            }
          },
          signatures = {
            fc = <function 10>,
            fmap = <function 11>
          },
          <metatable> = {
            __kind = "Functor",
            __name = "Functor",
            __type = "Typeclass"
          }
        }, {
          expect = { "f" },
          instances = {
            Maybe = {
              liftA2 = {
                fn = <function 12>,
                name = "liftA2",
                safe = false,
                signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                silent = false,
                tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                  __fn = true,
                  __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                  context = {
                    Maybe = { "Functor" }
                  },
                  left = { -- a->b->c
                    __fn = true,
                    __sig = "a->b->c",
                    context = {},
                    left = "a",
                    right = { -- b->c
                      __fn = true,
                      __sig = "b->c",
                      context = {},
                      left = "b",
                      right = "c",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  name = "liftA2",
                  right = { -- Maybe a->Maybe b->Maybe c
                    __fn = true,
                    __sig = "Maybe a->Maybe b->Maybe c",
                    context = {},
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe c
                      __fn = true,
                      __sig = "Maybe b->Maybe c",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe c
                         "Maybe", "c",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 13>,
                  __kind = "TypeKit",
                  __name = "liftA2",
                  __type = "Function"
                }
              },
              pure = {
                fn = <function 14>,
                name = "pure",
                safe = false,
                signature = "(pure)   Functor Maybe => a -> Maybe a",
                silent = false,
                tree = { -- Functor Maybe=>a->Maybe a
                  __fn = true,
                  __sig = "Functor Maybe=>a->Maybe a",
                  context = {
                    Maybe = { "Functor" }
                  },
                  left = "a",
                  name = "pure",
                  right = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 15>,
                  __kind = "TypeKit",
                  __name = "pure",
                  __type = "Function"
                }
              },
              seqAppl = {
                fn = <function 16>,
                safe = false,
                signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                silent = false,
                tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                  __fn = true,
                  __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                  context = {
                    ["<*>"] = {},
                    Maybe = { "Functor" }
                  },
                  left = { -- Maybe a->b
                     "Maybe", { -- a->b
                      __fn = true,
                      __sig = "a->b",
                      context = {},
                      left = "a",
                      right = "b",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe a->Maybe b
                    __fn = true,
                    __sig = "Maybe a->Maybe b",
                    context = {},
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 17>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              },
              seqR = {
                fn = <function 18>,
                safe = false,
                signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                silent = false,
                tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                  __fn = true,
                  __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                  context = {
                    ["*>"] = {},
                    Maybe = { "Functor" }
                  },
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b->Maybe b
                    __fn = true,
                    __sig = "Maybe b->Maybe b",
                    context = {},
                    left = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 19>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              }
            }
          },
          signatures = {
            liftA2 = <function 20>,
            pure = <function 21>,
            seqAppl = <function 22>,
            seqL = <function 23>,
            seqR = <function 24>
          },
          <metatable> = {
            __kind = "Applicative",
            __name = "Applicative",
            __type = "Typeclass"
          }
        }, {
          expect = { "m" },
          instances = {
            Maybe = {
              bind = {
                fn = <function 25>,
                safe = false,
                signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                silent = false,
                tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                  __fn = true,
                  __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                  context = {
                    [">>="] = {},
                    Maybe = { "Applicative" }
                  },
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- (a->Maybe b)->Maybe b
                    __fn = true,
                    __sig = "(a->Maybe b)->Maybe b",
                    context = {},
                    left = { -- a->Maybe b
                      __fn = true,
                      __sig = "a->Maybe b",
                      context = {},
                      left = "a",
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 26>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              },
              fail = {
                fn = <function 27>,
                name = "fail",
                safe = false,
                signature = "(fail)   Applicative Maybe => String -> Maybe a",
                silent = false,
                tree = { -- Applicative Maybe=>String->Maybe a
                  __fn = true,
                  __sig = "Applicative Maybe=>String->Maybe a",
                  context = {
                    Maybe = { "Applicative" }
                  },
                  left = "String",
                  name = "fail",
                  right = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 28>,
                  __kind = "TypeKit",
                  __name = "fail",
                  __type = "Function"
                }
              },
              pass = {
                fn = <function 29>,
                safe = false,
                signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                silent = false,
                tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                  __fn = true,
                  __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                  context = {
                    [">>"] = {},
                    Maybe = { "Applicative" }
                  },
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b->Maybe b
                    __fn = true,
                    __sig = "Maybe b->Maybe b",
                    context = {},
                    left = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 30>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              }
            }
          },
          signatures = {
            bind = <function 31>,
            fail = <function 32>,
            pass = <function 33>,
            ret = <function 34>
          },
          <metatable> = {
            __kind = "Monad",
            __name = "Monad",
            __type = "Typeclass"
          }
        } },
      <metatable> = {
        __index = <3>{
          Just = {
            fn = <function 35>,
            name = "Just",
            safe = false,
            signature = "(Just) a -> Maybe",
            silent = false,
            tree = { -- a->Maybe
              __fn = true,
              __sig = "a->Maybe",
              context = {},
              left = "a",
              name = "Just",
              right = "Maybe",
              <metatable> = {
                __tostring = <function 2>
              }
            },
            type = <table 2>,
            <metatable> = {
              __call = <function 36>,
              __cons = "Just",
              __kind = "TypeKit",
              __name = "Just",
              __parent = <table 1>,
              __type = "Function"
            }
          },
          Nothing = {
            <metatable> = {
              __cons = "Nothing",
              __kind = "Nothing",
              __name = "Nothing",
              __parent = <table 1>,
              __type = "Maybe"
            }
          }
        },
        __kind = "Maybe",
        __name = "Maybe",
        __ref = <table 3>,
        __tostring = <function 37>,
        __type = "Type"
      }
    },
    __type = "Maybe"
  }
}
Ti	{ -- Maybe a
   "Maybe", "a",
  __appl = true,
  <metatable> = {
    __tostring = <function 1>
  }
}
cachex	{}
appl1/2	{ -- Maybe a
   "Maybe", "a",
  __appl = true,
  <metatable> = {
    __tostring = <function 1>
  }
}	{ 5,
  <metatable> = {
    __kind = "Just",
    __name = "Just",
    __parent = <1>{ -- Maybe
      constructors = {
        Just = "Maybe a",
        Nothing = "Maybe "
      },
      instanceOf = { {
          expect = { "f" },
          instances = {
            Maybe = {
              fmap = {
                fn = <function 1>,
                name = "fmap",
                safe = false,
                signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                silent = false,
                tree = { -- (a->b)->Maybe a->Maybe b
                  __fn = true,
                  __sig = "(a->b)->Maybe a->Maybe b",
                  context = {},
                  left = { -- a->b
                    __fn = true,
                    __sig = "a->b",
                    context = {},
                    left = "a",
                    right = "b",
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  name = "fmap",
                  right = { -- Maybe a->Maybe b
                    __fn = true,
                    __sig = "Maybe a->Maybe b",
                    context = {},
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <2>{
                  add = <function 4>,
                  datatypes = {
                    Maybe = <table 1>
                  },
                  resolve = <function 5>,
                  resolvers = { <function 6>, <function 7> },
                  <metatable> = {
                    __call = <function 8>
                  }
                },
                <metatable> = {
                  __call = <function 9>,
                  __kind = "TypeKit",
                  __name = "fmap",
                  __type = "Function"
                }
              }
            }
          },
          signatures = {
            fc = <function 10>,
            fmap = <function 11>
          },
          <metatable> = {
            __kind = "Functor",
            __name = "Functor",
            __type = "Typeclass"
          }
        }, {
          expect = { "f" },
          instances = {
            Maybe = {
              liftA2 = {
                fn = <function 12>,
                name = "liftA2",
                safe = false,
                signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                silent = false,
                tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                  __fn = true,
                  __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                  context = {
                    Maybe = { "Functor" }
                  },
                  left = { -- a->b->c
                    __fn = true,
                    __sig = "a->b->c",
                    context = {},
                    left = "a",
                    right = { -- b->c
                      __fn = true,
                      __sig = "b->c",
                      context = {},
                      left = "b",
                      right = "c",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  name = "liftA2",
                  right = { -- Maybe a->Maybe b->Maybe c
                    __fn = true,
                    __sig = "Maybe a->Maybe b->Maybe c",
                    context = {},
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe c
                      __fn = true,
                      __sig = "Maybe b->Maybe c",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe c
                         "Maybe", "c",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 13>,
                  __kind = "TypeKit",
                  __name = "liftA2",
                  __type = "Function"
                }
              },
              pure = {
                fn = <function 14>,
                name = "pure",
                safe = false,
                signature = "(pure)   Functor Maybe => a -> Maybe a",
                silent = false,
                tree = { -- Functor Maybe=>a->Maybe a
                  __fn = true,
                  __sig = "Functor Maybe=>a->Maybe a",
                  context = {
                    Maybe = { "Functor" }
                  },
                  left = "a",
                  name = "pure",
                  right = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 15>,
                  __kind = "TypeKit",
                  __name = "pure",
                  __type = "Function"
                }
              },
              seqAppl = {
                fn = <function 16>,
                safe = false,
                signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                silent = false,
                tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                  __fn = true,
                  __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                  context = {
                    ["<*>"] = {},
                    Maybe = { "Functor" }
                  },
                  left = { -- Maybe a->b
                     "Maybe", { -- a->b
                      __fn = true,
                      __sig = "a->b",
                      context = {},
                      left = "a",
                      right = "b",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe a->Maybe b
                    __fn = true,
                    __sig = "Maybe a->Maybe b",
                    context = {},
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 17>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              },
              seqR = {
                fn = <function 18>,
                safe = false,
                signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                silent = false,
                tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                  __fn = true,
                  __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                  context = {
                    ["*>"] = {},
                    Maybe = { "Functor" }
                  },
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b->Maybe b
                    __fn = true,
                    __sig = "Maybe b->Maybe b",
                    context = {},
                    left = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 19>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              }
            }
          },
          signatures = {
            liftA2 = <function 20>,
            pure = <function 21>,
            seqAppl = <function 22>,
            seqL = <function 23>,
            seqR = <function 24>
          },
          <metatable> = {
            __kind = "Applicative",
            __name = "Applicative",
            __type = "Typeclass"
          }
        }, {
          expect = { "m" },
          instances = {
            Maybe = {
              bind = {
                fn = <function 25>,
                safe = false,
                signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                silent = false,
                tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                  __fn = true,
                  __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                  context = {
                    [">>="] = {},
                    Maybe = { "Applicative" }
                  },
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- (a->Maybe b)->Maybe b
                    __fn = true,
                    __sig = "(a->Maybe b)->Maybe b",
                    context = {},
                    left = { -- a->Maybe b
                      __fn = true,
                      __sig = "a->Maybe b",
                      context = {},
                      left = "a",
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 26>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              },
              fail = {
                fn = <function 27>,
                name = "fail",
                safe = false,
                signature = "(fail)   Applicative Maybe => String -> Maybe a",
                silent = false,
                tree = { -- Applicative Maybe=>String->Maybe a
                  __fn = true,
                  __sig = "Applicative Maybe=>String->Maybe a",
                  context = {
                    Maybe = { "Applicative" }
                  },
                  left = "String",
                  name = "fail",
                  right = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 28>,
                  __kind = "TypeKit",
                  __name = "fail",
                  __type = "Function"
                }
              },
              pass = {
                fn = <function 29>,
                safe = false,
                signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                silent = false,
                tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                  __fn = true,
                  __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                  context = {
                    [">>"] = {},
                    Maybe = { "Applicative" }
                  },
                  left = { -- Maybe a
                     "Maybe", "a",
                    __appl = true,
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  right = { -- Maybe b->Maybe b
                    __fn = true,
                    __sig = "Maybe b->Maybe b",
                    context = {},
                    left = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b
                       "Maybe", "b",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  <metatable> = {
                    __tostring = <function 2>
                  }
                },
                type = <table 2>,
                <metatable> = {
                  __call = <function 30>,
                  __kind = "TypeKit",
                  __type = "Function"
                }
              }
            }
          },
          signatures = {
            bind = <function 31>,
            fail = <function 32>,
            pass = <function 33>,
            ret = <function 34>
          },
          <metatable> = {
            __kind = "Monad",
            __name = "Monad",
            __type = "Typeclass"
          }
        } },
      <metatable> = {
        __index = <3>{
          Just = {
            fn = <function 35>,
            name = "Just",
            safe = false,
            signature = "(Just) a -> Maybe",
            silent = false,
            tree = { -- a->Maybe
              __fn = true,
              __sig = "a->Maybe",
              context = {},
              left = "a",
              name = "Just",
              right = "Maybe",
              <metatable> = {
                __tostring = <function 2>
              }
            },
            type = <table 2>,
            <metatable> = {
              __call = <function 36>,
              __cons = "Just",
              __kind = "TypeKit",
              __name = "Just",
              __parent = <table 1>,
              __type = "Function"
            }
          },
          Nothing = {
            <metatable> = {
              __cons = "Nothing",
              __kind = "Nothing",
              __name = "Nothing",
              __parent = <table 1>,
              __type = "Maybe"
            }
          }
        },
        __kind = "Maybe",
        __name = "Maybe",
        __ref = <table 3>,
        __tostring = <function 37>,
        __type = "Type"
      }
    },
    __type = "Maybe"
  }
}
p/xparam	2	a	5
[0m[36m! Saving value in cache. 'a' becomes Number.[0m
full-argi	{ { 5,
    <metatable> = {
      __kind = "Just",
      __name = "Just",
      __parent = <1>{ -- Maybe
        constructors = {
          Just = "Maybe a",
          Nothing = "Maybe "
        },
        instanceOf = { {
            expect = { "f" },
            instances = {
              Maybe = {
                fmap = {
                  fn = <function 1>,
                  name = "fmap",
                  safe = false,
                  signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(a->b)->Maybe a->Maybe b",
                    context = {},
                    left = { -- a->b
                      __fn = true,
                      __sig = "a->b",
                      context = {},
                      left = "a",
                      right = "b",
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    name = "fmap",
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <2>{
                    add = <function 4>,
                    datatypes = {
                      Maybe = <table 1>
                    },
                    resolve = <function 5>,
                    resolvers = { <function 6>, <function 7> },
                    <metatable> = {
                      __call = <function 8>
                    }
                  },
                  <metatable> = {
                    __call = <function 9>,
                    __kind = "TypeKit",
                    __name = "fmap",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              fc = <function 10>,
              fmap = <function 11>
            },
            <metatable> = {
              __kind = "Functor",
              __name = "Functor",
              __type = "Typeclass"
            }
          }, {
            expect = { "f" },
            instances = {
              Maybe = {
                liftA2 = {
                  fn = <function 12>,
                  name = "liftA2",
                  safe = false,
                  signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                  silent = false,
                  tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                    __fn = true,
                    __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = { -- a->b->c
                      __fn = true,
                      __sig = "a->b->c",
                      context = {},
                      left = "a",
                      right = { -- b->c
                        __fn = true,
                        __sig = "b->c",
                        context = {},
                        left = "b",
                        right = "c",
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    name = "liftA2",
                    right = { -- Maybe a->Maybe b->Maybe c
                      __fn = true,
                      __sig = "Maybe a->Maybe b->Maybe c",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b->Maybe c
                        __fn = true,
                        __sig = "Maybe b->Maybe c",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        right = { -- Maybe c
                           "Maybe", "c",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 13>,
                    __kind = "TypeKit",
                    __name = "liftA2",
                    __type = "Function"
                  }
                },
                pure = {
                  fn = <function 14>,
                  name = "pure",
                  safe = false,
                  signature = "(pure)   Functor Maybe => a -> Maybe a",
                  silent = false,
                  tree = { -- Functor Maybe=>a->Maybe a
                    __fn = true,
                    __sig = "Functor Maybe=>a->Maybe a",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = "a",
                    name = "pure",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 15>,
                    __kind = "TypeKit",
                    __name = "pure",
                    __type = "Function"
                  }
                },
                seqAppl = {
                  fn = <function 16>,
                  safe = false,
                  signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                    context = {
                      ["<*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a->b
                       "Maybe", { -- a->b
                        __fn = true,
                        __sig = "a->b",
                        context = {},
                        left = "a",
                        right = "b",
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 17>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                seqR = {
                  fn = <function 18>,
                  safe = false,
                  signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      ["*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 19>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              liftA2 = <function 20>,
              pure = <function 21>,
              seqAppl = <function 22>,
              seqL = <function 23>,
              seqR = <function 24>
            },
            <metatable> = {
              __kind = "Applicative",
              __name = "Applicative",
              __type = "Typeclass"
            }
          }, {
            expect = { "m" },
            instances = {
              Maybe = {
                bind = {
                  fn = <function 25>,
                  safe = false,
                  signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                  silent = false,
                  tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                    __fn = true,
                    __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                    context = {
                      [">>="] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- (a->Maybe b)->Maybe b
                      __fn = true,
                      __sig = "(a->Maybe b)->Maybe b",
                      context = {},
                      left = { -- a->Maybe b
                        __fn = true,
                        __sig = "a->Maybe b",
                        context = {},
                        left = "a",
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 26>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                fail = {
                  fn = <function 27>,
                  name = "fail",
                  safe = false,
                  signature = "(fail)   Applicative Maybe => String -> Maybe a",
                  silent = false,
                  tree = { -- Applicative Maybe=>String->Maybe a
                    __fn = true,
                    __sig = "Applicative Maybe=>String->Maybe a",
                    context = {
                      Maybe = { "Applicative" }
                    },
                    left = "String",
                    name = "fail",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 28>,
                    __kind = "TypeKit",
                    __name = "fail",
                    __type = "Function"
                  }
                },
                pass = {
                  fn = <function 29>,
                  safe = false,
                  signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      [">>"] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 2>
                    }
                  },
                  type = <table 2>,
                  <metatable> = {
                    __call = <function 30>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              bind = <function 31>,
              fail = <function 32>,
              pass = <function 33>,
              ret = <function 34>
            },
            <metatable> = {
              __kind = "Monad",
              __name = "Monad",
              __type = "Typeclass"
            }
          } },
        <metatable> = {
          __index = <3>{
            Just = {
              fn = <function 35>,
              name = "Just",
              safe = false,
              signature = "(Just) a -> Maybe",
              silent = false,
              tree = { -- a->Maybe
                __fn = true,
                __sig = "a->Maybe",
                context = {},
                left = "a",
                name = "Just",
                right = "Maybe",
                <metatable> = {
                  __tostring = <function 2>
                }
              },
              type = <table 2>,
              <metatable> = {
                __call = <function 36>,
                __cons = "Just",
                __kind = "TypeKit",
                __name = "Just",
                __parent = <table 1>,
                __type = "Function"
              }
            },
            Nothing = {
              <metatable> = {
                __cons = "Nothing",
                __kind = "Nothing",
                __name = "Nothing",
                __parent = <table 1>,
                __type = "Maybe"
              }
            }
          },
          __kind = "Maybe",
          __name = "Maybe",
          __ref = <table 3>,
          __tostring = <function 37>,
          __type = "Type"
        }
      },
      __type = "Maybe"
    }
  } }
[0m[34m============[0m
retv	{ <function 1> }
[0m[34m============[0m
argx	1	Function	<function 1>
Ti	{ -- (a->Maybe b)->Maybe b
  __fn = true,
  __sig = "(a->Maybe b)->Maybe b",
  context = {},
  left = { -- a->Maybe b
    __fn = true,
    __sig = "a->Maybe b",
    context = {},
    left = "a",
    right = { -- Maybe b
       "Maybe", "b",
      __appl = true,
      <metatable> = {
        __tostring = <function 1>
      }
    },
    <metatable> = {
      __tostring = <function 2>
    }
  },
  right = { -- Maybe b
     "Maybe", "b",
    __appl = true,
    <metatable> = {
      __tostring = <function 1>
    }
  },
  <metatable> = {
    __tostring = <function 2>
  }
}
cachex	{
  a = "Number"
}
[0m[33m[WARN] Automatically signing #1 with signature '(a->Maybe b)->Maybe b'. This may cause unintended behaviour. (#nil)[0m
[0m[37m       In function: [33mcheckSide[37m[0m
[0m       Signature:   [32m'(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b'[0m
[0m       Stack traceback:[0m
[0m         [33mcheckSide[37m in @./ltypekit/sign.moon at line 211[0m
[0m         [33mnil[37m in @./ltypekit/sign.moon at line 280[0m
[0m         [33mmoonscript_chunk[37m in @test/monad.moon at line 190[0m
[0m         [33mnil[37m in @/home/daelvn/.luaver/luarocks/3.0.3_5.3/lib/luarocks/rocks-5.3/moonscript/0.5.0-1/bin/moon at line 86[0m
[0m[32m# Creating signed constructor for (a->Maybe b)->Maybe b[0m
[0m[33m@ Setting function for (a->Maybe b)->Maybe b[0m
argo-full	{ {
    fn = <function 1>,
    safe = false,
    signature = "(a->Maybe b)->Maybe b",
    silent = false,
    tree = { -- (a->Maybe b)->Maybe b
      __fn = true,
      __sig = "(a->Maybe b)->Maybe b",
      context = {},
      left = { -- a->Maybe b
        __fn = true,
        __sig = "a->Maybe b",
        context = {},
        left = "a",
        right = { -- Maybe b
           "Maybe", "b",
          __appl = true,
          <metatable> = {
            __tostring = <function 2>
          }
        },
        <metatable> = {
          __tostring = <function 3>
        }
      },
      right = { -- Maybe b
         "Maybe", "b",
        __appl = true,
        <metatable> = {
          __tostring = <function 2>
        }
      },
      <metatable> = {
        __tostring = <function 3>
      }
    },
    type = <1>{
      add = <function 4>,
      datatypes = {
        Maybe = <2>{ -- Maybe
          constructors = {
            Just = "Maybe a",
            Nothing = "Maybe "
          },
          instanceOf = { {
              expect = { "f" },
              instances = {
                Maybe = {
                  fmap = {
                    fn = <function 5>,
                    name = "fmap",
                    safe = false,
                    signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                    silent = false,
                    tree = { -- (a->b)->Maybe a->Maybe b
                      __fn = true,
                      __sig = "(a->b)->Maybe a->Maybe b",
                      context = {},
                      left = { -- a->b
                        __fn = true,
                        __sig = "a->b",
                        context = {},
                        left = "a",
                        right = "b",
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      name = "fmap",
                      right = { -- Maybe a->Maybe b
                        __fn = true,
                        __sig = "Maybe a->Maybe b",
                        context = {},
                        left = { -- Maybe a
                           "Maybe", "a",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 6>,
                      __kind = "TypeKit",
                      __name = "fmap",
                      __type = "Function"
                    }
                  }
                }
              },
              signatures = {
                fc = <function 7>,
                fmap = <function 8>
              },
              <metatable> = {
                __kind = "Functor",
                __name = "Functor",
                __type = "Typeclass"
              }
            }, {
              expect = { "f" },
              instances = {
                Maybe = {
                  liftA2 = {
                    fn = <function 9>,
                    name = "liftA2",
                    safe = false,
                    signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                    silent = false,
                    tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                      __fn = true,
                      __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                      context = {
                        Maybe = { "Functor" }
                      },
                      left = { -- a->b->c
                        __fn = true,
                        __sig = "a->b->c",
                        context = {},
                        left = "a",
                        right = { -- b->c
                          __fn = true,
                          __sig = "b->c",
                          context = {},
                          left = "b",
                          right = "c",
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      name = "liftA2",
                      right = { -- Maybe a->Maybe b->Maybe c
                        __fn = true,
                        __sig = "Maybe a->Maybe b->Maybe c",
                        context = {},
                        left = { -- Maybe a
                           "Maybe", "a",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b->Maybe c
                          __fn = true,
                          __sig = "Maybe b->Maybe c",
                          context = {},
                          left = { -- Maybe b
                             "Maybe", "b",
                            __appl = true,
                            <metatable> = {
                              __tostring = <function 2>
                            }
                          },
                          right = { -- Maybe c
                             "Maybe", "c",
                            __appl = true,
                            <metatable> = {
                              __tostring = <function 2>
                            }
                          },
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 10>,
                      __kind = "TypeKit",
                      __name = "liftA2",
                      __type = "Function"
                    }
                  },
                  pure = {
                    fn = <function 11>,
                    name = "pure",
                    safe = false,
                    signature = "(pure)   Functor Maybe => a -> Maybe a",
                    silent = false,
                    tree = { -- Functor Maybe=>a->Maybe a
                      __fn = true,
                      __sig = "Functor Maybe=>a->Maybe a",
                      context = {
                        Maybe = { "Functor" }
                      },
                      left = "a",
                      name = "pure",
                      right = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 12>,
                      __kind = "TypeKit",
                      __name = "pure",
                      __type = "Function"
                    }
                  },
                  seqAppl = {
                    fn = <function 13>,
                    safe = false,
                    signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                    silent = false,
                    tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                      __fn = true,
                      __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                      context = {
                        ["<*>"] = {},
                        Maybe = { "Functor" }
                      },
                      left = { -- Maybe a->b
                         "Maybe", { -- a->b
                          __fn = true,
                          __sig = "a->b",
                          context = {},
                          left = "a",
                          right = "b",
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe a->Maybe b
                        __fn = true,
                        __sig = "Maybe a->Maybe b",
                        context = {},
                        left = { -- Maybe a
                           "Maybe", "a",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 14>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  },
                  seqR = {
                    fn = <function 15>,
                    safe = false,
                    signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                    silent = false,
                    tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                      __fn = true,
                      __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                      context = {
                        ["*>"] = {},
                        Maybe = { "Functor" }
                      },
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b->Maybe b
                        __fn = true,
                        __sig = "Maybe b->Maybe b",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 16>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  }
                }
              },
              signatures = {
                liftA2 = <function 17>,
                pure = <function 18>,
                seqAppl = <function 19>,
                seqL = <function 20>,
                seqR = <function 21>
              },
              <metatable> = {
                __kind = "Applicative",
                __name = "Applicative",
                __type = "Typeclass"
              }
            }, {
              expect = { "m" },
              instances = {
                Maybe = {
                  bind = {
                    fn = <function 22>,
                    safe = false,
                    signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                    silent = false,
                    tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                      __fn = true,
                      __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                      context = {
                        [">>="] = {},
                        Maybe = { "Applicative" }
                      },
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- (a->Maybe b)->Maybe b
                        __fn = true,
                        __sig = "(a->Maybe b)->Maybe b",
                        context = {},
                        left = { -- a->Maybe b
                          __fn = true,
                          __sig = "a->Maybe b",
                          context = {},
                          left = "a",
                          right = { -- Maybe b
                             "Maybe", "b",
                            __appl = true,
                            <metatable> = {
                              __tostring = <function 2>
                            }
                          },
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 23>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  },
                  fail = {
                    fn = <function 24>,
                    name = "fail",
                    safe = false,
                    signature = "(fail)   Applicative Maybe => String -> Maybe a",
                    silent = false,
                    tree = { -- Applicative Maybe=>String->Maybe a
                      __fn = true,
                      __sig = "Applicative Maybe=>String->Maybe a",
                      context = {
                        Maybe = { "Applicative" }
                      },
                      left = "String",
                      name = "fail",
                      right = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 25>,
                      __kind = "TypeKit",
                      __name = "fail",
                      __type = "Function"
                    }
                  },
                  pass = {
                    fn = <function 26>,
                    safe = false,
                    signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                    silent = false,
                    tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                      __fn = true,
                      __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                      context = {
                        [">>"] = {},
                        Maybe = { "Applicative" }
                      },
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b->Maybe b
                        __fn = true,
                        __sig = "Maybe b->Maybe b",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 27>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  }
                }
              },
              signatures = {
                bind = <function 28>,
                fail = <function 29>,
                pass = <function 30>,
                ret = <function 31>
              },
              <metatable> = {
                __kind = "Monad",
                __name = "Monad",
                __type = "Typeclass"
              }
            } },
          <metatable> = {
            __index = <3>{
              Just = {
                fn = <function 32>,
                name = "Just",
                safe = false,
                signature = "(Just) a -> Maybe",
                silent = false,
                tree = { -- a->Maybe
                  __fn = true,
                  __sig = "a->Maybe",
                  context = {},
                  left = "a",
                  name = "Just",
                  right = "Maybe",
                  <metatable> = {
                    __tostring = <function 3>
                  }
                },
                type = <table 1>,
                <metatable> = {
                  __call = <function 33>,
                  __cons = "Just",
                  __kind = "TypeKit",
                  __name = "Just",
                  __parent = <table 2>,
                  __type = "Function"
                }
              },
              Nothing = {
                <metatable> = {
                  __cons = "Nothing",
                  __kind = "Nothing",
                  __name = "Nothing",
                  __parent = <table 2>,
                  __type = "Maybe"
                }
              }
            },
            __kind = "Maybe",
            __name = "Maybe",
            __ref = <table 3>,
            __tostring = <function 34>,
            __type = "Type"
          }
        }
      },
      resolve = <function 35>,
      resolvers = { <function 36>, <function 37> },
      <metatable> = {
        __call = <function 38>
      }
    },
    <metatable> = {
      __call = <function 39>,
      __kind = "TypeKit",
      __type = "Function"
    }
  } }
precache?	nil
[0m[33m@ Calling function (a->Maybe b)->Maybe b[0m	{ {
    fn = <function 1>,
    safe = false,
    signature = "a -> Maybe b",
    silent = false,
    tree = { -- a->Maybe b
      __fn = true,
      __sig = "a->Maybe b",
      context = {},
      left = "a",
      right = { -- Maybe b
         "Maybe", "b",
        __appl = true,
        <metatable> = {
          __tostring = <function 2>
        }
      },
      <metatable> = {
        __tostring = <function 3>
      }
    },
    type = <1>{
      add = <function 4>,
      datatypes = {
        Maybe = <2>{ -- Maybe
          constructors = {
            Just = "Maybe a",
            Nothing = "Maybe "
          },
          instanceOf = { {
              expect = { "f" },
              instances = {
                Maybe = {
                  fmap = {
                    fn = <function 5>,
                    name = "fmap",
                    safe = false,
                    signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                    silent = false,
                    tree = { -- (a->b)->Maybe a->Maybe b
                      __fn = true,
                      __sig = "(a->b)->Maybe a->Maybe b",
                      context = {},
                      left = { -- a->b
                        __fn = true,
                        __sig = "a->b",
                        context = {},
                        left = "a",
                        right = "b",
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      name = "fmap",
                      right = { -- Maybe a->Maybe b
                        __fn = true,
                        __sig = "Maybe a->Maybe b",
                        context = {},
                        left = { -- Maybe a
                           "Maybe", "a",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 6>,
                      __kind = "TypeKit",
                      __name = "fmap",
                      __type = "Function"
                    }
                  }
                }
              },
              signatures = {
                fc = <function 7>,
                fmap = <function 8>
              },
              <metatable> = {
                __kind = "Functor",
                __name = "Functor",
                __type = "Typeclass"
              }
            }, {
              expect = { "f" },
              instances = {
                Maybe = {
                  liftA2 = {
                    fn = <function 9>,
                    name = "liftA2",
                    safe = false,
                    signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                    silent = false,
                    tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                      __fn = true,
                      __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                      context = {
                        Maybe = { "Functor" }
                      },
                      left = { -- a->b->c
                        __fn = true,
                        __sig = "a->b->c",
                        context = {},
                        left = "a",
                        right = { -- b->c
                          __fn = true,
                          __sig = "b->c",
                          context = {},
                          left = "b",
                          right = "c",
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      name = "liftA2",
                      right = { -- Maybe a->Maybe b->Maybe c
                        __fn = true,
                        __sig = "Maybe a->Maybe b->Maybe c",
                        context = {},
                        left = { -- Maybe a
                           "Maybe", "a",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b->Maybe c
                          __fn = true,
                          __sig = "Maybe b->Maybe c",
                          context = {},
                          left = { -- Maybe b
                             "Maybe", "b",
                            __appl = true,
                            <metatable> = {
                              __tostring = <function 2>
                            }
                          },
                          right = { -- Maybe c
                             "Maybe", "c",
                            __appl = true,
                            <metatable> = {
                              __tostring = <function 2>
                            }
                          },
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 10>,
                      __kind = "TypeKit",
                      __name = "liftA2",
                      __type = "Function"
                    }
                  },
                  pure = {
                    fn = <function 11>,
                    name = "pure",
                    safe = false,
                    signature = "(pure)   Functor Maybe => a -> Maybe a",
                    silent = false,
                    tree = { -- Functor Maybe=>a->Maybe a
                      __fn = true,
                      __sig = "Functor Maybe=>a->Maybe a",
                      context = {
                        Maybe = { "Functor" }
                      },
                      left = "a",
                      name = "pure",
                      right = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 12>,
                      __kind = "TypeKit",
                      __name = "pure",
                      __type = "Function"
                    }
                  },
                  seqAppl = {
                    fn = <function 13>,
                    safe = false,
                    signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                    silent = false,
                    tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                      __fn = true,
                      __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                      context = {
                        ["<*>"] = {},
                        Maybe = { "Functor" }
                      },
                      left = { -- Maybe a->b
                         "Maybe", { -- a->b
                          __fn = true,
                          __sig = "a->b",
                          context = {},
                          left = "a",
                          right = "b",
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe a->Maybe b
                        __fn = true,
                        __sig = "Maybe a->Maybe b",
                        context = {},
                        left = { -- Maybe a
                           "Maybe", "a",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 14>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  },
                  seqR = {
                    fn = <function 15>,
                    safe = false,
                    signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                    silent = false,
                    tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                      __fn = true,
                      __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                      context = {
                        ["*>"] = {},
                        Maybe = { "Functor" }
                      },
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b->Maybe b
                        __fn = true,
                        __sig = "Maybe b->Maybe b",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 16>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  }
                }
              },
              signatures = {
                liftA2 = <function 17>,
                pure = <function 18>,
                seqAppl = <function 19>,
                seqL = <function 20>,
                seqR = <function 21>
              },
              <metatable> = {
                __kind = "Applicative",
                __name = "Applicative",
                __type = "Typeclass"
              }
            }, {
              expect = { "m" },
              instances = {
                Maybe = {
                  bind = {
                    fn = <function 22>,
                    safe = false,
                    signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                    silent = false,
                    tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                      __fn = true,
                      __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                      context = {
                        [">>="] = {},
                        Maybe = { "Applicative" }
                      },
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- (a->Maybe b)->Maybe b
                        __fn = true,
                        __sig = "(a->Maybe b)->Maybe b",
                        context = {},
                        left = { -- a->Maybe b
                          __fn = true,
                          __sig = "a->Maybe b",
                          context = {},
                          left = "a",
                          right = { -- Maybe b
                             "Maybe", "b",
                            __appl = true,
                            <metatable> = {
                              __tostring = <function 2>
                            }
                          },
                          <metatable> = {
                            __tostring = <function 3>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 23>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  },
                  fail = {
                    fn = <function 24>,
                    name = "fail",
                    safe = false,
                    signature = "(fail)   Applicative Maybe => String -> Maybe a",
                    silent = false,
                    tree = { -- Applicative Maybe=>String->Maybe a
                      __fn = true,
                      __sig = "Applicative Maybe=>String->Maybe a",
                      context = {
                        Maybe = { "Applicative" }
                      },
                      left = "String",
                      name = "fail",
                      right = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 25>,
                      __kind = "TypeKit",
                      __name = "fail",
                      __type = "Function"
                    }
                  },
                  pass = {
                    fn = <function 26>,
                    safe = false,
                    signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                    silent = false,
                    tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                      __fn = true,
                      __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                      context = {
                        [">>"] = {},
                        Maybe = { "Applicative" }
                      },
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b->Maybe b
                        __fn = true,
                        __sig = "Maybe b->Maybe b",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    type = <table 1>,
                    <metatable> = {
                      __call = <function 27>,
                      __kind = "TypeKit",
                      __type = "Function"
                    }
                  }
                }
              },
              signatures = {
                bind = <function 28>,
                fail = <function 29>,
                pass = <function 30>,
                ret = <function 31>
              },
              <metatable> = {
                __kind = "Monad",
                __name = "Monad",
                __type = "Typeclass"
              }
            } },
          <metatable> = {
            __index = <3>{
              Just = {
                fn = <function 32>,
                name = "Just",
                safe = false,
                signature = "(Just) a -> Maybe",
                silent = false,
                tree = { -- a->Maybe
                  __fn = true,
                  __sig = "a->Maybe",
                  context = {},
                  left = "a",
                  name = "Just",
                  right = "Maybe",
                  <metatable> = {
                    __tostring = <function 3>
                  }
                },
                type = <table 1>,
                <metatable> = {
                  __call = <function 33>,
                  __cons = "Just",
                  __kind = "TypeKit",
                  __name = "Just",
                  __parent = <table 2>,
                  __type = "Function"
                }
              },
              Nothing = {
                <metatable> = {
                  __cons = "Nothing",
                  __kind = "Nothing",
                  __name = "Nothing",
                  __parent = <table 2>,
                  __type = "Maybe"
                }
              }
            },
            __kind = "Maybe",
            __name = "Maybe",
            __ref = <table 3>,
            __tostring = <function 34>,
            __type = "Type"
          }
        }
      },
      resolve = <function 35>,
      resolvers = { <function 36>, <function 37> },
      <metatable> = {
        __call = <function 38>
      }
    },
    <metatable> = {
      __call = <function 39>,
      __kind = "TypeKit",
      __type = "Function"
    }
  } }
[0m[35m= Using cache[0m	{
  a = "Number"
}
[0m[33m@ Applying arguments to (a->Maybe b)->Maybe b[0m
argx	1	Function	{
  fn = <function 1>,
  safe = false,
  signature = "a -> Maybe b",
  silent = false,
  tree = { -- a->Maybe b
    __fn = true,
    __sig = "a->Maybe b",
    context = {},
    left = "a",
    right = { -- Maybe b
       "Maybe", "b",
      __appl = true,
      <metatable> = {
        __tostring = <function 2>
      }
    },
    <metatable> = {
      __tostring = <function 3>
    }
  },
  type = <1>{
    add = <function 4>,
    datatypes = {
      Maybe = <2>{ -- Maybe
        constructors = {
          Just = "Maybe a",
          Nothing = "Maybe "
        },
        instanceOf = { {
            expect = { "f" },
            instances = {
              Maybe = {
                fmap = {
                  fn = <function 5>,
                  name = "fmap",
                  safe = false,
                  signature = "(fmap) (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(a->b)->Maybe a->Maybe b",
                    context = {},
                    left = { -- a->b
                      __fn = true,
                      __sig = "a->b",
                      context = {},
                      left = "a",
                      right = "b",
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    name = "fmap",
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  type = <table 1>,
                  <metatable> = {
                    __call = <function 6>,
                    __kind = "TypeKit",
                    __name = "fmap",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              fc = <function 7>,
              fmap = <function 8>
            },
            <metatable> = {
              __kind = "Functor",
              __name = "Functor",
              __type = "Typeclass"
            }
          }, {
            expect = { "f" },
            instances = {
              Maybe = {
                liftA2 = {
                  fn = <function 9>,
                  name = "liftA2",
                  safe = false,
                  signature = "(liftA2) Functor Maybe => (a -> b -> c) -> Maybe a -> Maybe b -> Maybe c",
                  silent = false,
                  tree = { -- Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c
                    __fn = true,
                    __sig = "Functor Maybe=>(a->b->c)->Maybe a->Maybe b->Maybe c",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = { -- a->b->c
                      __fn = true,
                      __sig = "a->b->c",
                      context = {},
                      left = "a",
                      right = { -- b->c
                        __fn = true,
                        __sig = "b->c",
                        context = {},
                        left = "b",
                        right = "c",
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    name = "liftA2",
                    right = { -- Maybe a->Maybe b->Maybe c
                      __fn = true,
                      __sig = "Maybe a->Maybe b->Maybe c",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b->Maybe c
                        __fn = true,
                        __sig = "Maybe b->Maybe c",
                        context = {},
                        left = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        right = { -- Maybe c
                           "Maybe", "c",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  type = <table 1>,
                  <metatable> = {
                    __call = <function 10>,
                    __kind = "TypeKit",
                    __name = "liftA2",
                    __type = "Function"
                  }
                },
                pure = {
                  fn = <function 11>,
                  name = "pure",
                  safe = false,
                  signature = "(pure)   Functor Maybe => a -> Maybe a",
                  silent = false,
                  tree = { -- Functor Maybe=>a->Maybe a
                    __fn = true,
                    __sig = "Functor Maybe=>a->Maybe a",
                    context = {
                      Maybe = { "Functor" }
                    },
                    left = "a",
                    name = "pure",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  type = <table 1>,
                  <metatable> = {
                    __call = <function 12>,
                    __kind = "TypeKit",
                    __name = "pure",
                    __type = "Function"
                  }
                },
                seqAppl = {
                  fn = <function 13>,
                  safe = false,
                  signature = "(<*>)    Functor Maybe => Maybe (a -> b) -> Maybe a -> Maybe b",
                  silent = false,
                  tree = { -- (<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b
                    __fn = true,
                    __sig = "(<*>)    Functor Maybe=>Maybe (a->b)->Maybe a->Maybe b",
                    context = {
                      ["<*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a->b
                       "Maybe", { -- a->b
                        __fn = true,
                        __sig = "a->b",
                        context = {},
                        left = "a",
                        right = "b",
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    right = { -- Maybe a->Maybe b
                      __fn = true,
                      __sig = "Maybe a->Maybe b",
                      context = {},
                      left = { -- Maybe a
                         "Maybe", "a",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  type = <table 1>,
                  <metatable> = {
                    __call = <function 14>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                seqR = {
                  fn = <function 15>,
                  safe = false,
                  signature = "(*>)     Functor Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(*>)     Functor Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      ["*>"] = {},
                      Maybe = { "Functor" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  type = <table 1>,
                  <metatable> = {
                    __call = <function 16>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              liftA2 = <function 17>,
              pure = <function 18>,
              seqAppl = <function 19>,
              seqL = <function 20>,
              seqR = <function 21>
            },
            <metatable> = {
              __kind = "Applicative",
              __name = "Applicative",
              __type = "Typeclass"
            }
          }, {
            expect = { "m" },
            instances = {
              Maybe = {
                bind = {
                  fn = <function 22>,
                  safe = false,
                  signature = "(>>=)    Applicative Maybe => Maybe a -> (a -> Maybe b) -> Maybe b",
                  silent = false,
                  tree = { -- (>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b
                    __fn = true,
                    __sig = "(>>=)    Applicative Maybe=>Maybe a->(a->Maybe b)->Maybe b",
                    context = {
                      [">>="] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    right = { -- (a->Maybe b)->Maybe b
                      __fn = true,
                      __sig = "(a->Maybe b)->Maybe b",
                      context = {},
                      left = { -- a->Maybe b
                        __fn = true,
                        __sig = "a->Maybe b",
                        context = {},
                        left = "a",
                        right = { -- Maybe b
                           "Maybe", "b",
                          __appl = true,
                          <metatable> = {
                            __tostring = <function 2>
                          }
                        },
                        <metatable> = {
                          __tostring = <function 3>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  type = <table 1>,
                  <metatable> = {
                    __call = <function 23>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                },
                fail = {
                  fn = <function 24>,
                  name = "fail",
                  safe = false,
                  signature = "(fail)   Applicative Maybe => String -> Maybe a",
                  silent = false,
                  tree = { -- Applicative Maybe=>String->Maybe a
                    __fn = true,
                    __sig = "Applicative Maybe=>String->Maybe a",
                    context = {
                      Maybe = { "Applicative" }
                    },
                    left = "String",
                    name = "fail",
                    right = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  type = <table 1>,
                  <metatable> = {
                    __call = <function 25>,
                    __kind = "TypeKit",
                    __name = "fail",
                    __type = "Function"
                  }
                },
                pass = {
                  fn = <function 26>,
                  safe = false,
                  signature = "(>>)     Applicative Maybe => Maybe a -> Maybe b -> Maybe b",
                  silent = false,
                  tree = { -- (>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b
                    __fn = true,
                    __sig = "(>>)     Applicative Maybe=>Maybe a->Maybe b->Maybe b",
                    context = {
                      [">>"] = {},
                      Maybe = { "Applicative" }
                    },
                    left = { -- Maybe a
                       "Maybe", "a",
                      __appl = true,
                      <metatable> = {
                        __tostring = <function 2>
                      }
                    },
                    right = { -- Maybe b->Maybe b
                      __fn = true,
                      __sig = "Maybe b->Maybe b",
                      context = {},
                      left = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      right = { -- Maybe b
                         "Maybe", "b",
                        __appl = true,
                        <metatable> = {
                          __tostring = <function 2>
                        }
                      },
                      <metatable> = {
                        __tostring = <function 3>
                      }
                    },
                    <metatable> = {
                      __tostring = <function 3>
                    }
                  },
                  type = <table 1>,
                  <metatable> = {
                    __call = <function 27>,
                    __kind = "TypeKit",
                    __type = "Function"
                  }
                }
              }
            },
            signatures = {
              bind = <function 28>,
              fail = <function 29>,
              pass = <function 30>,
              ret = <function 31>
            },
            <metatable> = {
              __kind = "Monad",
              __name = "Monad",
              __type = "Typeclass"
            }
          } },
        <metatable> = {
          __index = <3>{
            Just = {
              fn = <function 32>,
              name = "Just",
              safe = false,
              signature = "(Just) a -> Maybe",
              silent = false,
              tree = { -- a->Maybe
                __fn = true,
                __sig = "a->Maybe",
                context = {},
                left = "a",
                name = "Just",
                right = "Maybe",
                <metatable> = {
                  __tostring = <function 3>
                }
              },
              type = <table 1>,
              <metatable> = {
                __call = <function 33>,
                __cons = "Just",
                __kind = "TypeKit",
                __name = "Just",
                __parent = <table 2>,
                __type = "Function"
              }
            },
            Nothing = {
              <metatable> = {
                __cons = "Nothing",
                __kind = "Nothing",
                __name = "Nothing",
                __parent = <table 2>,
                __type = "Maybe"
              }
            }
          },
          __kind = "Maybe",
          __name = "Maybe",
          __ref = <table 3>,
          __tostring = <function 34>,
          __type = "Type"
        }
      }
    },
    resolve = <function 35>,
    resolvers = { <function 36>, <function 37> },
    <metatable> = {
      __call = <function 38>
    }
  },
  <metatable> = {
    __call = <function 39>,
    __kind = "TypeKit",
    __type = "Function"
  }
}
Ti	{ -- a->Maybe b
  __fn = true,
  __sig = "a->Maybe b",
  context = {},
  left = "a",
  right = { -- Maybe b
     "Maybe", "b",
    __appl = true,
    <metatable> = {
      __tostring = <function 1>
    }
  },
  <metatable> = {
    __tostring = <function 2>
  }
}
cachex	{
  a = "Number"
}
base	{ -- a->Maybe b
  __fn = true,
  __sig = "a->Maybe b",
  context = {},
  left = "a",
  right = { -- Maybe b
     "Maybe", "b",
    __appl = true,
    <metatable> = {
      __tostring = <function 1>
    }
  },
  <metatable> = {
    __tostring = <function 2>
  }
}
against	{ -- a->Maybe b
  __fn = true,
  __sig = "a->Maybe b",
  context = {},
  left = "a",
  right = { -- Maybe b
     "Maybe", "b",
    __appl = true,
    <metatable> = {
      __tostring = <function 1>
    }
  },
  <metatable> = {
    __tostring = <function 2>
  }
}
base	{ -- Maybe b
   "Maybe", "b",
  __appl = true,
  <metatable> = {
    __tostring = <function 1>
  }
}
against	{ -- Maybe b
   "Maybe", "b",
  __appl = true,
  <metatable> = {
    __tostring = <function 1>
  }
}
rf/7
nil
comparef	false	nil
[0m[31m[ERROR] Wrong value #1. Expected a->Maybe b, got unknown. [0m
[0m[37m        In function: [33mcheckSide[37m[0m
[0m        Signature:   [32m'(a->Maybe b)->Maybe b'[0m
[0m        Stack traceback:[0m
[0m          [31mcheckSide[37m in @./ltypekit/sign.moon at line 219[0m
[0m          [31mnil[37m in @./ltypekit/sign.moon at line 272[0m
[0m          [31mmoonscript_chunk[37m in @test/monad.moon at line 190[0m
[0m          [31mnil[37m in @/home/daelvn/.luaver/luarocks/3.0.3_5.3/lib/luarocks/rocks-5.3/moonscript/0.5.0-1/bin/moon at line 86[0m
